<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test on Polarlights</title>
    <link>https://polarlights.github.io/categories/test/</link>
    <description>Recent content in Test on Polarlights</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 21 Feb 2016 18:40:42 +0800</lastBuildDate>
    
	<atom:link href="https://polarlights.github.io/categories/test/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How Minitest Works Part 2</title>
      <link>https://polarlights.github.io/post/how_minitest_works_part_2/</link>
      <pubDate>Sun, 21 Feb 2016 18:40:42 +0800</pubDate>
      
      <guid>https://polarlights.github.io/post/how_minitest_works_part_2/</guid>
      <description>注：本文以 minitest 的最新master 分支 baf6010 ，版本为5.8.4为基础。 所有代码可以在https://github.com/minitest_source[minitest_source] 找到. 在上一节我们留下了以下几个问题，本节我们透过对Minitest源码的分析来一探究竟: minitest/autorun 到底做了什么？继承Minitest::Test的目的何在，它内部有什么特殊方法？为什么以test_ 开头的方法执行了，而普通的方法没</description>
    </item>
    
    <item>
      <title>How Minitest Works Part 1</title>
      <link>https://polarlights.github.io/post/how_minitest_works_part_1/</link>
      <pubDate>Sun, 21 Feb 2016 03:02:42 +0800</pubDate>
      
      <guid>https://polarlights.github.io/post/how_minitest_works_part_1/</guid>
      <description>注：本文以 minitest 的最新master 分支 baf6010 ，版本为5.8.4为基础。 所有代码可以在https://github.com/minitest_source[minitest_source] 找到. 一个简单的测试# 代码 1.1 # dog.rb class Dog def spark &#39;Spark!&#39; end end # dog_test.rb require &#39;minitest/autorun&#39; require_relative &#39;./dog&#39; class DogTest &amp;lt; Minitest::Test def setup @dog = Dog.new end def test_dog_should_spark assert_respond_to @dog, :spark assert_equal &#39;Spark!&#39;, @dog.spark end def ordiary_method assert true end end 如何执行测试呢？ $ ruby dog_test.rb Run options: --seed 24057 # Running: . Finished in 0.001039s, 962.5723 runs/s, 1925.1446 assertions/s. 1 runs, 2 assertions, 0 failures, 0 errors, 0 skips 如果我们把require &#39;minitest/autorun&#39; 这一行注释掉，然后</description>
    </item>
    
    <item>
      <title>写在前面</title>
      <link>https://polarlights.github.io/post/introduction_to_minitest/introduction_to_minitest/</link>
      <pubDate>Sat, 20 Feb 2016 03:19:33 +0800</pubDate>
      
      <guid>https://polarlights.github.io/post/introduction_to_minitest/introduction_to_minitest/</guid>
      <description>之前几乎不写测试，嗯，我属于那一类人。很多时候是自己先写一个功能，然后输入一些简单案例跑一跑，如果过了，那么就&amp;#8230;&amp;#8203;&amp;#8230;&amp;#8203;过了，可以放心继续下面的工作了。直到维护一个个前辈们的项目，而且功能不断添加，添加。问题接着出现了：按下葫芦浮起瓢，改了一个 Bug，引出了其它的 Bug。代码在修改过程中，越来越心里没底。更别说重构了。。。。 为什么要写测试？现在的 Coder 应该</description>
    </item>
    
  </channel>
</rss>