<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Polarlights</title>
    <link>https://polarlights.github.io/tags/git/</link>
    <description>Recent content in Git on Polarlights</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 04 Feb 2015 19:20:32 +0800</lastBuildDate>
    
	<atom:link href="https://polarlights.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>版本控制概念</title>
      <link>https://polarlights.github.io/post/pro-git-learning-notes/</link>
      <pubDate>Wed, 04 Feb 2015 19:20:32 +0800</pubDate>
      
      <guid>https://polarlights.github.io/post/pro-git-learning-notes/</guid>
      <description>版本控制(Reversion Control)是一种记录文件若干文件内容变化，以便将来直接查阅特定版本的系统。 版本控制系统的发展本地版本控制系统本地控制系统是比较早的版本控制系统，它使用简单的数据库来记录文件的历次更新差异。最流行的为rcs；在许多计算机系统中都还可以砍到它的影子。 集中化的版本控制系统本地版本控制系统只是在本地用作版本控制，而对于多人协同工作却无法做到，于是出现了集中化的版本控制系统</description>
    </item>
    
    <item>
      <title>Git常用资源</title>
      <link>https://polarlights.github.io/post/git-resources/</link>
      <pubDate>Fri, 30 Jan 2015 20:00:00 +0800</pubDate>
      
      <guid>https://polarlights.github.io/post/git-resources/</guid>
      <description>在工作目录中创建新仓库进入新建的目录GitTest $ git init 检查状态$ git status 添加与提交在当前工作目录中创建文件，这里我新建了ReadMe.md 添加变化$ git add ReadMe.md 检查变化$ git status 提交$ git commit -m &#34;Add ReadMe&#34; 添加所有变化比如添加所有的.md文件 $ git add &#39;*.md&#39; 提交所有变化$ git commit -m &#39;Add all md files&#39; 历史$ git log 远程仓库$ git remote add TestGit https://github.com/lay1010/TestGit.git 注意：按照官方教程，命令是add origin，而我之前已经误用过origin这个名字了，如果仍然git remote add origi</description>
    </item>
    
  </channel>
</rss>