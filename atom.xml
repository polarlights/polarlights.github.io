<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Polarlights</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://polarlights.github.io/"/>
  <updated>2019-08-11T09:30:13.722Z</updated>
  <id>https://polarlights.github.io/</id>
  
  <author>
    <name>David Wei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>bean validation tutorial</title>
    <link href="https://polarlights.github.io/2019/08/03/bean-validation-tutorial/"/>
    <id>https://polarlights.github.io/2019/08/03/bean-validation-tutorial/</id>
    <published>2019-08-03T07:50:02.000Z</published>
    <updated>2019-08-11T09:30:13.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>在开发 Web 接口的时候，客户端给到的输入参数往往是不可控，亦不可信的；需要在 server 端做一些校验，以使处理数据符合业务预期；除了web 接口之外，我们写的方法、DAO 对象都有类似的需求。也就是校验的需求贯穿服务的各个层。</p><p>简单粗暴一点的可以在每一层这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (param.getName() == null) &#123;</span><br><span class="line">  throw BadRequestException(&quot;name can not be null&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if (param.getAge() &lt; 1) &#123;</span><br><span class="line">  throw BadRequestException(&quot;age can not less than 1&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果遇到错误，我想最后统一抛出，用户可以一次知道哪些输入是有问题。那么我们可以这样写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; errorMessages = new ArraysList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">if (params.getName() == null) &#123;</span><br><span class="line">  errorMessages.add(&quot;name can not be null&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (param.getAge() &lt; 1) &#123;</span><br><span class="line">  errorMessages.add(&quot;age can not less than 1&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (errorMessages.size() &gt; 0) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写会有什么样的问题呢？</p><p>① 通用性不够<br>② 重复代码很多</p><p>那么如何解决这个问题呢？ Java 提供了 Bean Validation 的概念，先后经过了 <a href="https://beanvalidation.org/1.0/spec/" target="_blank" rel="noopener">[JSR303, 2009]</a>、<a href="https://beanvalidation.org/1.1/spec/" target="_blank" rel="noopener">[JSR 349, 2013]</a>, <a href="https://beanvalidation.org/2.0/spec/" target="_blank" rel="noopener">[JSR 380, 2017]</a> 三个标准。 Bean Validation 的目的是解决程序从表现层到持久层的对象的重复校验逻辑。它使用注解、XML 对对象的属性进行约束。</p><p>除了默认提供的校验注解，Bean Validation 还提供了自定义注解来实现自己的校验逻辑、本地化违反约定信息等能力。</p><p>下文我们主要以 Bean Validation 2.0为例进行讲解。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Bean Validation 2.0的官方认证实现为<a href="https://hibernate.org/validator/documentation/" target="_blank" rel="noopener">Hibernate Validator</a>。spring boot 项目只要引入了 spring-boot-starter-web 依赖就自动引入了相关依赖。</p><p>它需要的依赖有:</p><ol><li>javax.validation:validation-api</li><li>org.hibernate.validator:hibernate-validator</li></ol><p>前者提供抽象描述和抽象接口，后者提供具体实现。</p><h2 id="常用约束"><a href="#常用约束" class="headerlink" title="常用约束"></a>常用约束</h2><table><thead><tr><th>注解</th><th>适用对象类型</th><th>说明</th><th>null 是否被视为有效</th></tr></thead><tbody><tr><td>AssertFalse</td><td>boolean</td><td>元素必须为 false；</td><td>Y</td></tr><tr><td>AssertTrue</td><td>boolean</td><td>元素必须为 true；</td><td>Y</td></tr><tr><td>DecimalMax</td><td>BigDecimal, BigInteger, CharSequence, byte/short/int/long 及包装类型</td><td>元素必须小于等于给定值；</td><td>Y</td></tr><tr><td>DecimalMin</td><td>BigDecimal, BigInteger, CharSequence, byte/short/int/long 及包装类型</td><td>元素必须大于等于给定值；</td><td>Y</td></tr><tr><td>Digits</td><td>BigDecimal, BigInteger, CharSequence, byte/short/int/long 及包装类型</td><td>元素的整数与分数部分分别约束最大值；</td><td>Y</td></tr><tr><td>Email</td><td>String</td><td>字符串必须是有效的邮件地址</td><td>N</td></tr><tr><td>Future</td><td>Date/Calendar/Instant/LocalDate/LocalTime/LocalDateTime/MonthDay/OffsetDateTime/OffsetTime/Year/YearMonth/ZonedDateTime</td><td>元素必须大于当前时间</td><td>Y</td></tr><tr><td>FutureOrPresent</td><td>Date/Calendar/Instant/LocalDate/LocalTime/LocalDateTime/MonthDay/OffsetDateTime/OffsetTime/Year/YearMonth/ZonedDateTime</td><td>元素必须大于等于当前时间</td><td>Y</td></tr><tr><td>Max</td><td>BigDecimal/BigInteger/byte/short/int/long</td><td>元素小于等于给定值</td><td>Y</td></tr><tr><td>Min</td><td>BigDecimal/BigInteger/byte/short/int/long</td><td>元素大于等于给定值</td><td>Y</td></tr><tr><td>NotEmpty</td><td>String/Collection/Map/Array</td><td>元素不能为 null 或者为空</td><td>N</td></tr><tr><td>NotNull</td><td>any</td><td>元素不能为 null</td><td>N</td></tr><tr><td>Post</td><td>Date/Calendar/Instant/LocalDate/LocalTime/LocalDateTime/MonthDay/OffsetDateTime/OffsetTime/Year/YearMonth/ZonedDateTime</td><td>元素必须小于当前时间</td><td>Y</td></tr><tr><td>Pattern</td><td>String</td><td>字符串必须符合给定的正则</td><td>Y</td></tr><tr><td>Size</td><td>String/Collection/Map/Array</td><td>元素的长度/元素数量在给定范围内</td><td>Y</td></tr></tbody></table><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>在 Controller 参数前添加 @Valid 注解，即:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// model</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRequest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@NotEmpty</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="meta">@Range</span>(min=<span class="number">1</span>, max=<span class="number">125</span>)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="meta">@Valid</span></span><br><span class="line">  <span class="keyword">private</span> Address address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># controller</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">createUser</span><span class="params">(@Valid @RequestBody UserRequest user)</span></span>;</span><br></pre></td></tr></table></figure></p><p><strong>需要注意的是：</strong>① 如果对象嵌套了其它对象(即需要级联校验)，需要在里面使用 @Valid 注解 ② 如果 controller 使用继承实现，那么要符合里氏替换原则原则（即子类的约束被强化或者弱化; 父方法的约束会自然被子类方法继承)。</p><p>另外 Spring 默认不提供方法级别的校验，如果需要校验，需要在类级别添加<code>@Validated</code>注解。</p><p>如果想全局处理 Bean Validation 异常，则可以再 ErrorAdvice 处理类中，添加对<code>MethodArgumentNotValidException</code>异常处理即可。如果添加了对方法参数的校验，还需要再 ErrroAdvice 中添加 <code>ConstraintViolationException</code>异常类的处理。</p><h2 id="更多用法"><a href="#更多用法" class="headerlink" title="更多用法"></a>更多用法</h2><h3 id="自定义约束"><a href="#自定义约束" class="headerlink" title="自定义约束"></a>自定义约束</h3><p>如果默认的校验不能满足业务场景的需要，我们可以自定义约束。</p><p>每个约束注解的定义包括但不限于：</p><ol><li>注解的校验类 [非必需]</li><li>校验不通过的 message 字符串 [必需]</li><li>注解所属的分组(Group) [必需]</li><li>注解所属的负载(Payload) [必需]</li></ol><p>假如说现在有一个场景，某个字符串属性，只接受特定的几个值.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义约束注解</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy = &#123;StringRangeValidator.class&#125;)</span><br><span class="line"><span class="meta">@Target</span>(&#123;METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> StringRange &#123;</span><br><span class="line"></span><br><span class="line">    String[] values() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "属性值只能在指定的范围内"</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义校验实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringRangeValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">StringRange</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; valueSets = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(StringRange constraintAnnotation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String str : constraintAnnotation.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(str)) &#123;</span><br><span class="line">                valueSets.add(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> valueSets.contains(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样我们就很方便地实现了一个自定义的校验类。</p><h3 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h3><p>分组校验主要用于同一个 Bean 对象的特定属性在不同场景下约束行为不同服务的。比如一个 User 对象，创建与更新的对象大部分是相同的，不同的是更新时 ID 不为空，而创建时必须为空。那么我们可以分别定义两个组(组名一般是接口; 默认分组是 javax.validation.groups.Default.class)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CreatedGroup</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UpdatedGroup</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// User.java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@NotNull</span>(group = UpdatedGroup.class)</span><br><span class="line"><span class="meta">@Null</span>(group = CreatedGroup.class)</span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure><p>在启用校验的地方:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">createUser</span><span class="params">(@Validated(CreatedGroup.class)</span> CreateUserRequest createUserRequest) </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure></p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>我们没有处理的有 Payload(负载)的使用，它是附加在 Group 之外的一种元数据描述，一种用途是：描述校验的错误严重级别。因为使用较少，我们不多描述。有兴趣的朋友可以读一下Bean Validation 的 spec 文档。</p><p>如果我们在没有 Spring 的条件下想使用 Bean Validation 怎么办？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Validator validator = Validation.buildDefaultValidatorFactory().getValidator();</span><br><span class="line"></span><br><span class="line">validator.validate(instantce, constraintGroups);</span><br></pre></td></tr></table></figure></p><p>关联 repo: <a href="https://github.com/polarlights/bean_validation_tutorial" target="_blank" rel="noopener">https://github.com/polarlights/bean_validation_tutorial</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.jianshu.com/p/2a495bf5504e" target="_blank" rel="noopener">使用Bean Validation实现数据校验</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jsr303/index.html" target="_blank" rel="noopener">JSR 303 - Bean Validation 介绍及最佳实践</a></li><li><a href="https://beanvalidation.org/2.0/spec/#introduction" target="_blank" rel="noopener">Bean validation specification</a></li><li><a href="https://www.logicbig.com/how-to/code-snippets/jcode-bean-validation-javax-validation-payload.html" target="_blank" rel="noopener">Bean validation payload example</a></li><li><a href="https://www.logicbig.com/tutorials/java-ee-tutorial/bean-validation.html" target="_blank" rel="noopener">https://www.logicbig.com/tutorials/java-ee-tutorial/bean-validation.html</a></li><li><a href="https://hibernate.org/validator/documentation/" target="_blank" rel="noopener">Hibernate Validator Documentation</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h2&gt;&lt;p&gt;在开发 Web 接口的时候，客户端给到的输入参数往往是不可控，亦不可信的；需要在 server 端做
      
    
    </summary>
    
      <category term="java" scheme="https://polarlights.github.io/categories/java/"/>
    
    
      <category term="bean validation" scheme="https://polarlights.github.io/tags/bean-validation/"/>
    
  </entry>
  
  <entry>
    <title>Feign Code Analysis and Best Practice</title>
    <link href="https://polarlights.github.io/2019/07/20/feign-code-analysis-and-best-practise/"/>
    <id>https://polarlights.github.io/2019/07/20/feign-code-analysis-and-best-practise/</id>
    <published>2019-07-20T05:43:03.000Z</published>
    <updated>2019-08-11T09:30:13.722Z</updated>
    
    <content type="html"><![CDATA[<p>在日常开发过程中，程序员需要调用第三方或者第二方的接口。有的第三方或者第二方提供了供其他人使用的 client libarary, 还有一部分只是提供了接口声明和返回，需要调用者自己去根据接口约定去发起请求。在spring 程序中，Feign<a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener">^footnote_feign</a>是我们经常用到的一个库。本文主要讲解 Feign 的代码解析和在日常工作中的最佳实践。</p><h2 id="什么是-Feign"><a href="#什么是-Feign" class="headerlink" title="什么是 Feign"></a>什么是 Feign</h2><p>Feign |/<strong>feɪn</strong>/| 的意思是假装。它假装了什么呢？顾名思义，它让我们调用 HTTP 请求像调用本地方法一样。</p><p>它简化了HTTP 请求的调用，是一种声明式的 Web 服务客户端，灵感来源于<a href="https://github.com/square/retrofit" target="_blank" rel="noopener">Retrofit</a>、<a href="https://jax-rs-spec.java.net/nonav/2.0/apidocs/index.html" target="_blank" rel="noopener">JAXRS-2.0</a>和<a href="http://www.oracle.com/technetwork/articles/java/jsr356-1937161.html" target="_blank" rel="noopener">WebSocket</a>。</p><h2 id="Feign-的概念："><a href="#Feign-的概念：" class="headerlink" title="Feign 的概念："></a>Feign 的概念：</h2><p>在讲解 Feign 概念之前，我们先不去关心 Feign。假想一下，如果让我们去设计一个这样的库，我们需要哪些因素。</p><p>请求应答的基本要素有：</p><ol><li>请求的 URL：知道请求发往哪里。</li><li>请求的 method： 知道请求使用什么 Http Method。</li><li>请求的参数: server 需要客户端传哪些参数。</li><li>请求的应答：server 的应答如何处理。应答又分为两种：成功请求应答和失败请求应答。</li></ol><p>有了以上的要素，就可以基本确定一个请求的所有信息了。但是，这还不够：</p><p>声明了接口，请求还是得需要代码处理才能发出去。代码处理的第一步：它需要知道我们的声明和意图，即能够解析我们的声明。所以一个约定的解析器(Contract)是必需的。</p><p>代码懂了我们的意图，还需要行动，将请求发出去。请求的发出者，相对于服务提供者就是一个 Client。由 Client 具体执行，按照我们的意图，把请求发出去。</p><p>有了上面的信息，一个完整的请求就够了。但是，这还不够完美？</p><ol><li><p>加入我希望一个请求在 1S 内就能收到反馈，而实际服务提供者，需要 3S 钟才能有应答。这时候该如何声明我的期望，如何处理请求超时？</p><p> 我们作为客户端将请求发出去，必须要考虑我们的应用希望客户端多久可以返回。相信大家都不相等太久，所以我们要声明我们对请求的时间去期待，即超时时间。如果我们设置了超时时间，就需要有能力定制万一超时了怎么办: 要么重试或者直接报错返回。</p></li><li><p>如果服务需要客户端带上 token，或者作为服务中的一环，我希望可以追踪这次请求，怎么办？</p><p> 有时候服务端的请求需要我们带上 token，或者我们想在请求的头中加上用于追踪请求的 Http Header，要是有个请求拦截器就好了。</p></li></ol><p>到这里，由我们“设计”的声明式请求库就出炉了。回到我们前面的话题，Feign 是如何实现的呢？它有哪些概念？与我们上面的构思有何异同？</p><ul><li>Contract: 契约；用于解析接口声明，生成HTTP请求所需基本参数。<br>  默认契约在 feign 的 github 主页有介绍。spring-cloud-feign 中使用SpringMvcContract 解析 Spring 的注解，我们可以使用统一的注解，定义请求的基本参数。</li><li>Encoder: 编码器；用于对请求内容作编码。</li><li>Decoder: 解码器：解析请求应答；一般只解析成功返回的应答。</li><li>ErrorDecoder: 错误解码器。一般 400~5xx 的错误由此解析。</li><li>Target: 目标: 即请求所对应的目标类及请求的url.</li><li>Client: 请求具体客户端。可以由用户定制，默认为 HttpUrlConnection; 还可以使用 HttpClient、OkHttp、WebClient 等。</li><li>Retryer: 重试器；在网络 IO 有错误（比如超时、服务不可用等)，触发重试机制，具体重试的规则，在这个里面声明。</li><li>Logger: 日志；请求参数、url、应答、重试等日志的输出具体实现。</li><li>Options: 请求配置，一般用于定义请求的连接、读取应答的超时时间、是否响应 302 跳转。</li><li>RequestInterceptor: 请求拦截器，在请求发出前，对请求作修改。比如添加请求追踪，requestId 等。</li></ul><p>我们看一下 Feign 的基本声明和使用代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GitHub</span> </span>&#123;</span><br><span class="line">  <span class="meta">@RequestLine</span>(<span class="string">"GET /repos/&#123;owner&#125;/&#123;repo&#125;/contributors"</span>)</span><br><span class="line">  <span class="function">List&lt;Contributor&gt; <span class="title">contributors</span><span class="params">(@Param(<span class="string">"owner"</span>)</span> String owner, @<span class="title">Param</span><span class="params">(<span class="string">"repo"</span>)</span> String repo)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestLine</span>(<span class="string">"POST /repos/&#123;owner&#125;/&#123;repo&#125;/issues"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">createIssue</span><span class="params">(Issue issue, @Param(<span class="string">"owner"</span>)</span> String owner, @<span class="title">Param</span><span class="params">(<span class="string">"repo"</span>)</span> String repo)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Contributor</span> </span>&#123;</span><br><span class="line">  String login;</span><br><span class="line">  <span class="keyword">int</span> contributions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Issue</span> </span>&#123;</span><br><span class="line">  String title;</span><br><span class="line">  String body;</span><br><span class="line">  List&lt;String&gt; assignees;</span><br><span class="line">  <span class="keyword">int</span> milestone;</span><br><span class="line">  List&lt;String&gt; labels;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    GitHub github = Feign.builder()</span><br><span class="line">                         .decoder(<span class="keyword">new</span> GsonDecoder())</span><br><span class="line">                         .target(GitHub.class, <span class="string">"https://api.github.com"</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Fetch and print a list of the contributors to this library.</span></span><br><span class="line">    List&lt;Contributor&gt; contributors = github.contributors(<span class="string">"OpenFeign"</span>, <span class="string">"feign"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Contributor contributor : contributors) &#123;</span><br><span class="line">      System.out.println(contributor.login + <span class="string">" ("</span> + contributor.contributions + <span class="string">")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>可见 Feign 的设计与我们之前的“设计”非常接近；作为一个框架，它提供了很好的扩展能力，这些扩展能力的设计，也是我们需要着重学习的。</p><p>Feign 把很多概念定义为接口或者抽象类，方便我们扩展和定制已有的实现，也可以定义自己的私有实现。比如拍拍贷团队基于 Feign开发的 Raptor库，它拓展了 Feign 的实现，支持 google 的 protobuf。</p><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><p>以下代码解析基于 Feign 10.2.3，不同版本实现细节可能会有差异。</p><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><ol><li>ParseHandlersByName.apply 使用 contract(契约)解析接口类上的注解，获取到相关的 meta 信息，将方法与BuildTemplateByResolvingArgs(用于构建 RequestTemplate)及SynchronousMethodHandler做绑定。</li><li>ReflectiveFeign 对 1 的结果进行处理，新建一个 java 代理，非默认方法使用代理类处理；默认方法绑定到代理方法上。</li><li>返回代理类。</li></ol><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><p>执行的过程本质是java 代理类的调用过程，实际调用的是代理类对应的 MethodHandler。</p><ol><li>新建 MethodHandler 实例</li><li>将 RequestTemplate转为 Request，发起 HTTP 请求。<br> 这个过程会对请求编码，如果有拦截器，则会使用拦截器对请求做处理。</li><li>根据返回的 Response的状态，判断正常 decode 还是调用 ErrorDecoder。如果超时的话，会调用重试器实例进行处理，由它决定继续重试还是抛出异常。</li><li>如果正常返回，调用 Decoder 反序列化为方法声明的返回类型。</li></ol><p>更为详细的代码解析，大家可以参考拍拍贷技术博客的一篇文章 <a href="http://techblog.ppdai.com/2018/05/14/20180514/" target="_blank" rel="noopener">^footnote_paipaidai</a></p><h3 id="Feign-涉及到的设计模式"><a href="#Feign-涉及到的设计模式" class="headerlink" title="Feign 涉及到的设计模式"></a>Feign 涉及到的设计模式</h3><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>Feign 本质上通过 Java 的代理，将声明与实现进行解耦。调用者不用关心具体的实现，只需要假装调用本地方法一样来调用 HTTP 请求。</p><h4 id="Builder"><a href="#Builder" class="headerlink" title="Builder"></a>Builder</h4><p>Feign.Builder 调用者不需要关心 Feign 的实现细节，构建一个代理类。比如前面例子中的 <strong>GitHub</strong>接口，在被初始化之后就成为了实现了 GIthub 接口的代理类。</p><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><p>服务声明接口中定义的默认接口方法和普通接口方法，分别使用 DefaultMethodHandler 和 SynchronousMethodHandler处理。前者相当于调用接口的普通默认方法，后者为实际代理方法。</p><h4 id="简单工厂方法"><a href="#简单工厂方法" class="headerlink" title="简单工厂方法"></a>简单工厂方法</h4><p>InvocationHabndlerFactory 根据传入的 Target 和方法 Handler 映射构建 InvodationHandler 类。</p><h2 id="Feign-有哪些不足"><a href="#Feign-有哪些不足" class="headerlink" title="Feign 有哪些不足"></a>Feign 有哪些不足</h2><ol><li>没有提供细粒度地控制接口超时时间的注解</li></ol><p>我们不能具体在接口层面约定请求的超时时间，只能将不同超时时间的接口，分别放在不同的文件中。当然，这个也不会是大问题，有赖于 Feign 的良好扩展性，我们可以添加自己的注解和扩展已有的契约(Contract)，使它支持更精细粒度的控制。</p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p>必须声明接口的超时时间</p><p> 默认情况下，Feign 的连接超时时间为 10S，读取超时时间为 60S。不论是当前的微服务条件下，还是作为单独一个应用，默认的超时时间肯定不可以直接用。否则会降低服务的吞吐量，也影响着客户端的使用体验。</p></li><li><p>一个服务内，统一 ErrorDecoder</p><p> 从应用的角度来讲，我们给客户端的应答的 body 结构应该是统一的，类似：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"errors"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"code"</span>: <span class="string">"error.system.remote_service_call"</span>,</span><br><span class="line">      <span class="attr">"detail"</span>: <span class="string">"获取天气信息失败"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 对于 RPC的异常情况，错误的 code可以统一，错误的 detail 有利于我们理解到底发生了什么。使用 ErrorDecoder，解析错误的应答，可以帮助我们实现之。</p></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在日常开发过程中，程序员需要调用第三方或者第二方的接口。有的第三方或者第二方提供了供其他人使用的 client libarary, 还有一部分只是提供了接口声明和返回，需要调用者自己去根据接口约定去发起请求。在spring 程序中，Feign&lt;a href=&quot;https:/
      
    
    </summary>
    
      <category term="java" scheme="https://polarlights.github.io/categories/java/"/>
    
      <category term="spring" scheme="https://polarlights.github.io/categories/java/spring/"/>
    
    
      <category term="java" scheme="https://polarlights.github.io/tags/java/"/>
    
      <category term="feign" scheme="https://polarlights.github.io/tags/feign/"/>
    
      <category term="feign best practice" scheme="https://polarlights.github.io/tags/feign-best-practice/"/>
    
      <category term="feign 代码解析" scheme="https://polarlights.github.io/tags/feign-%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>hibernate-best-practice</title>
    <link href="https://polarlights.github.io/2018/12/06/hibernate-best-practice/"/>
    <id>https://polarlights.github.io/2018/12/06/hibernate-best-practice/</id>
    <published>2018-12-06T02:08:59.000Z</published>
    <updated>2019-08-11T09:30:13.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-设置数据库存储时间的时区"><a href="#1-设置数据库存储时间的时区" class="headerlink" title="1. 设置数据库存储时间的时区"></a>1. 设置数据库存储时间的时区</h2><p>如果某个应用考虑到国际化，服务会部署在多个时区，或者用户会和不同时区的人打交道；存储的时间建议使用 UTC 时间。比如美国有夏令时，会根据季节调整时间。使用 UTC 时间会更好地适应变化。</p><p>Hibernate 在时间的存取的时候，会调用<code>PreparedStatement.setTimestamp()</code>/<code>ResultSet.getTimestamp</code>，默认情况下，会 fall back 为 JVM 所在的时区。为了能够存储 UTC 时间，将 JDBC 的链接时区设置为 UTC 即可。即<code>spring.jpa.properties.hibernate.jdbc.time_zone=UTC</code>。</p><p>需要注意的是，对于 MySQL 数据库，在连接 URL 上要添加上<code>useLegacyDatetimeCode=false</code>，否则会导致时间并不会被转换为 UTC 时间。</p><p>当然，如果服务的时区是稳定的（比如固定在东八区），存储为服务当前时间服务也可以正常工作。</p><h2 id="2-检查生成的-SQL-是否与预期中的一致"><a href="#2-检查生成的-SQL-是否与预期中的一致" class="headerlink" title="2. 检查生成的 SQL 是否与预期中的一致"></a>2. 检查生成的 SQL 是否与预期中的一致</h2><p>在查询、更新、删除记录的时候，一并检查生成的 SQL 是否与预期一致，可以在早期发现并解决潜在的性能问题。</p><p>JPA 开启打印日志的设置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.jpa.show-sql=true</span><br><span class="line">spring.jpa.properties.hibernate.type=trace</span><br><span class="line">spring.jpa.properties.hibernate.use_sql_comments=true</span><br><span class="line">spring.jpa.properties.hibernate.format_sql=true</span><br><span class="line">logging.level.org.hibernate.type.descriptor.sql=trace</span><br><span class="line">logging.level.org.hibernate.SQL=trace</span><br></pre></td></tr></table></figure></p><p>打印日志还可以比较早地发现 N+1查询问题。</p><p><strong>注意</strong>：仅在非生产环境打印SQL。</p><h2 id="如何懒加载某个属性"><a href="#如何懒加载某个属性" class="headerlink" title="如何懒加载某个属性"></a>如何懒加载某个属性</h2><h3 id="使用代码增强，并在属性上添加相应的注解："><a href="#使用代码增强，并在属性上添加相应的注解：" class="headerlink" title="使用代码增强，并在属性上添加相应的注解："></a>使用代码增强，并在属性上添加相应的注解：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getPicture() &#123;</span><br><span class="line">    <span class="keyword">return</span> picture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：</p><ul><li>在使用的时候，会额外产生一条查询的 SQL</li><li>代码增强会修改原来的代码，做一些处理</li></ul><p>需要注意的是：懒加载属性懒加载生效的前提是，没有 eager load 的关联；如果存在的话，注解失效。</p><h3 id="使用子类"><a href="#使用子类" class="headerlink" title="使用子类"></a>使用子类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseAttachment</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id; </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"attachment"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttachmentSummary</span> <span class="keyword">extends</span> <span class="title">BaseAttachment</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"attachment"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Attachment</span> <span class="keyword">extends</span> <span class="title">BaseAttachment</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Lob</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：</p><ul><li>无侵入性代码，性能会更好</li><li>调用者需要对子类要有意识</li></ul><h2 id="实现-equals-hashCode-toString-方法"><a href="#实现-equals-hashCode-toString-方法" class="headerlink" title="实现 equals/hashCode/toString 方法"></a>实现 equals/hashCode/toString 方法</h2><h3 id="equals-hashCode"><a href="#equals-hashCode" class="headerlink" title="equals/hashCode"></a>equals/hashCode</h3><p>equals 用于比较两个对象是否相等，重载时要遵守：</p><ul><li>自反性：对于任何非null的引用值x, x.equals(x)必须返回true</li><li>对称性：对于任何非null的引用值x和y,当且仅当y.equals(x)返回true时，x.equals(y)必须返回true</li><li>传递性：对于任何非null的引用值x,y和z，如果x.equals(y)返回true，并且y.equals(z)返回true，那么x.equals(z)返回true</li><li>一致性: 对于任何非null的引用值x和y，只要equals的比较操作在对象中所用的信息没有被修改，多次调用x.equals(y)就会一致地返回<br>true，或者一致地返回false</li><li>非null 引用与 null 比较，永远返回false</li></ul><p>hashCode 主要用于对象存储在 Hash 相关的存储模型，提供散列计算。</p><p>如果两个对象 equals，那么 hashCode 必然要相等。不同对象 hashCode 最好不要相同，尤其在数据量较大的时候。</p><p>考虑到实体的特性，实体一般都有标识符字段，它的来源有：</p><ol><li>分配的（比如 UUID/ISBN/ID number)等</li><li>DB生成</li></ol><p>对于前者，可以直接使用分配的标识符作为 equals/hashCode 的关键要素:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Book)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Book book = (Book) o;</span><br><span class="line">    <span class="keyword">return</span> Objects.equals(getIsbn(), book.getIsbn());</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> Objects.hash(getIsbn());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>对于后者，需要这样做：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Book)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Book book = (Book) o;</span><br><span class="line">        <span class="keyword">return</span> id != <span class="keyword">null</span> &amp;&amp; id.equals(book.id);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>大家会发现 hashCode 永远返回<strong>31</strong>，使用固定值的原因是：<br>如果使用下面的代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Book)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Book book = (Book) o;</span><br><span class="line">        <span class="keyword">return</span> id != <span class="keyword">null</span> &amp;&amp; id.equals(book.id);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为 ID 是在持久化之后，由数据库分配的；如果在持久化之前，他们是存储在一个 HashSet 中，入库之前，它的 hashCode 是 <strong>0</strong>；持久化之后，它的值发生了改变，HashSet 就不会包含当前的实体了。</p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><p>toString 不建议包含关联实体。</p><p>如果关联是 Eager 加载的，容易引起性能问题（子实体关联的子实体，形成链式的查询)；如果关联是 Lazy加载的，会抛出：LazyInitializationException 异常。</p><h2 id="如果主键是-UUID"><a href="#如果主键是-UUID" class="headerlink" title="如果主键是 UUID"></a>如果主键是 UUID</h2><p>将id的类型设置为 UUID 即可,另外需要确保 GeneratedType 为AUTO:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"Post"</span>)</span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"post"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Post</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="comment">// @GeneratedValue 默认策略为 GenerationType.AUTO</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> UUID id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想自定义其它 ID 生成策略，可以参考 hibernate 的 UserGuide，里面有简单的例子可以参考。</p><h2 id="自增主键的生成策略"><a href="#自增主键的生成策略" class="headerlink" title="自增主键的生成策略"></a>自增主键的生成策略</h2><p>Hibernate 5之前，可以使用:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"Post"</span>)</span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"post"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Post</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>自 Hibernate 5之后，MySQL需要调整为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"Post"</span>)</span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"post"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Post</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>AUTO 会 fall back 为性能差的 TABLE 生成器，需要显式声明为 IDENTITY。</p><h2 id="检查生成的-SQL-是否与预期中的一致"><a href="#检查生成的-SQL-是否与预期中的一致" class="headerlink" title="检查生成的 SQL 是否与预期中的一致"></a>检查生成的 SQL 是否与预期中的一致</h2><p>在查询、更新、删除记录的时候，一并检查生成的 SQL 是否与预期一致，可以在早期发现并解决潜在的性能问题。</p><p>JPA 开启打印日志的设置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.jpa.show-sql=true</span><br><span class="line">spring.jpa.properties.hibernate.type=trace</span><br><span class="line">spring.jpa.properties.hibernate.use_sql_comments=true</span><br><span class="line">spring.jpa.properties.hibernate.format_sql=true</span><br><span class="line">logging.level.org.hibernate.type.descriptor.sql=trace</span><br><span class="line">logging.level.org.hibernate.SQL=trace</span><br></pre></td></tr></table></figure></p><p>打印日志还可以比较早地发现 N+1查询问题。</p><p><strong>注意</strong>：仅在非生产环境打印SQL。</p><h2 id="EAGER-加载是一种-code-Smell"><a href="#EAGER-加载是一种-code-Smell" class="headerlink" title="EAGER 加载是一种 code Smell"></a>EAGER 加载是一种 code Smell</h2><p>加载策略不应该是实体关联的责任，简单地将在实体上将关联设置为 EAGER加载，会造成性能问题。在不同的业务场景下，需要加载不同的关联实体,所以要根据业务场景，在查询的时候，将关联实体一并查出来。</p><p>在实体上写的关联关系，加载策略要全部设置为 LAZY。默认情况下，不同关联关系的加载策略为:</p><table><thead><tr><th>关联关系</th><th>默认加载策略</th></tr></thead><tbody><tr><td>OneToOne</td><td>EAGER</td></tr><tr><td>ManyToOne</td><td>EAGER</td></tr><tr><td>OneToMany</td><td>LAZY</td></tr><tr><td>ManyToMany</td><td>LAZY</td></tr></tbody></table><h2 id="subselect-是一种-code-smell"><a href="#subselect-是一种-code-smell" class="headerlink" title="subselect 是一种 code smell"></a>subselect 是一种 code smell</h2><h2 id="transaction-open-in-view-是一种-code-smell"><a href="#transaction-open-in-view-是一种-code-smell" class="headerlink" title="transaction open-in-view 是一种 code smell"></a>transaction open-in-view 是一种 code smell</h2><h2 id="JPA-读取数据的时候也显示地声明只读事务"><a href="#JPA-读取数据的时候也显示地声明只读事务" class="headerlink" title="JPA 读取数据的时候也显示地声明只读事务"></a>JPA 读取数据的时候也显示地声明只读事务</h2><p><a href="https://stackoverflow.com/questions/26327274/do-you-need-a-database-transaction-for-reading-data/26327536#26327536" target="_blank" rel="noopener">Do you need a database transaction for reading data?</a></p><blockquote><p>All database statements are executed within the context of a physical transaction, even when we don’t explicitly declare transaction boundaries (BEGIN/COMMIT/ROLLBACK).</p><p>If you don&#39;t declare transaction boundaries, then each statement will have to be executed in a separate transaction (autocommit mode). This may even lead to opening and closing one connection per statement unless your environment can deal with connection-per-thread binding.</p><p>Declaring a service as @Transactional will give you one connection for the whole transaction duration, and all statements will use that single isolation connection. This is way better than not using explicit transactions in the first place.</p><p>On large applications, you may have many concurrent requests, and reducing database connection acquisition request rate will definitely improve your overall application performance.</p><p>JPA doesn&#39;t enforce transactions on read operations. Only writes end up throwing a transaction required exception in case you forget to start a transactional context. Nevertheless, it&#39;s always better to declare transaction boundaries even for read-only transactions (in Spring @Transactional allows you to mark read-only transactions, which has a great performance benefit).</p><p>Now, if you use declarative transaction boundaries (e.g. @Transactional), you need to make sure that the database connection acquisition is delayed until there is a JDBC statement to be executed. In JTA, this is the default behavior. When using RESOURCE_LOCAL, you need to set the hibernate.connection.provider_disables_autocommit configuration property and make sure that the underlying connection pool is set to disable the auto-commit mode.</p></blockquote><h2 id="Casecase-要按需使用"><a href="#Casecase-要按需使用" class="headerlink" title="Casecase 要按需使用"></a>Casecase 要按需使用</h2><p>级联处理是 ORM 的 feature，在使用的时候首先要按照业务需求设置，不能简单地在父实体上设置为 <code>CascadeType.ALL</code>；而且级联处理要放在父实体上，而不是子实体，不滥用。</p><h3 id="Casecade-最佳实践"><a href="#Casecade-最佳实践" class="headerlink" title="Casecade 最佳实践"></a>Casecade 最佳实践</h3><h4 id="OntToOne"><a href="#OntToOne" class="headerlink" title="OntToOne"></a>OntToOne</h4><h5 id="双向-OneToOne-关联："><a href="#双向-OneToOne-关联：" class="headerlink" title="双向 OneToOne 关联："></a>双向 OneToOne 关联：</h5><ol><li>双向关联需要在父子两边都更新变动，父实体应该包含 addChild 和 removeChild 方法组合，以保证变动的一致性。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Post</span> </span>&#123;</span><br><span class="line">    <span class="meta">@OneToOne</span>(mappedBy = <span class="string">"post"</span>, cascade = CascadeType.ALL, orphanRemoval = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> PostDetails details;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDetails</span><span class="params">(PostDetails details)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.details = details;</span><br><span class="line">        details.setPost(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeDetails</span><span class="params">(PostDetails details)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (details != <span class="keyword">null</span>) &#123;</span><br><span class="line">            details.setPost(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.details = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostDetails</span> </span>&#123;</span><br><span class="line">    <span class="meta">@OneToOne</span></span><br><span class="line">    <span class="meta">@MapsId</span></span><br><span class="line">    <span class="keyword">private</span> Post post;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="单向-OneToOne-关联："><a href="#单向-OneToOne-关联：" class="headerlink" title="单向 OneToOne 关联："></a>单向 OneToOne 关联：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Commit</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String comment; </span><br><span class="line">    <span class="meta">@OneToOne</span>(cascade = CascadeType.ALL)</span><br><span class="line">    <span class="meta">@JoinTable</span>(</span><br><span class="line">        name = <span class="string">"Branch_Merge_Commit"</span>,</span><br><span class="line">        joinColumns = <span class="meta">@JoinColumn</span>(</span><br><span class="line">            name = <span class="string">"commit_id"</span>, </span><br><span class="line">            referencedColumnName = <span class="string">"id"</span>),</span><br><span class="line">        inverseJoinColumns = <span class="meta">@JoinColumn</span>(</span><br><span class="line">            name = <span class="string">"branch_merge_id"</span>, </span><br><span class="line">            referencedColumnName = <span class="string">"id"</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBranchMerge</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        String fromBranch, String toBranch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.branchMerge = <span class="keyword">new</span> BranchMerge(</span><br><span class="line">             fromBranch, toBranch);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeBranchMerge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.branchMerge = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="OneToMany"><a href="#OneToMany" class="headerlink" title="OneToMany"></a>OneToMany</h4><p>OneToMany关联的对象不宜太多，如果太多，同样也会在更新子实体的时候，加载很多无用的实体。</p><h5 id="双向"><a href="#双向" class="headerlink" title="双向"></a>双向</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Post</span> </span>&#123;</span><br><span class="line">   <span class="meta">@OneToMany</span>(cascade = CascadeType.ALL, </span><br><span class="line">        mappedBy = <span class="string">"post"</span>, orphanRemoval = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Comment&gt; comments = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addComment</span><span class="params">(Comment comment)</span> </span>&#123;</span><br><span class="line">        comments.add(comment);</span><br><span class="line">        comment.setPost(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeComment</span><span class="params">(Comment comment)</span> </span>&#123;</span><br><span class="line">        comment.setPost(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.comments.remove(comment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ManyToOne</span>(fetch = FetchType.LAZY)</span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"post_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Post post;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="单向"><a href="#单向" class="headerlink" title="单向"></a>单向</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"Post"</span>)</span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"post"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Post</span> </span>&#123;</span><br><span class="line">    <span class="meta">@OneToMany</span>(cascade = CascadeType.ALL, orphanRemoval = <span class="keyword">true</span>)</span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"post_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;PostComment&gt; comments = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ManyToMany"><a href="#ManyToMany" class="headerlink" title="ManyToMany"></a>ManyToMany</h4><p>可以使用 ManyToMany 注解，也可以将其拆分为两个 <code>OneToMany</code> 关联。 前者比较自然；后者可以更好地控制数据的粒度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"Post"</span>)</span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"post"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Post</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ManyToMany</span>(cascade = &#123;CascadeType.PERSIST, CascadeType.MERGE &#125;)</span><br><span class="line">    <span class="meta">@JoinTable</span>(name = <span class="string">"post_tag"</span>,</span><br><span class="line">        joinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"post_id"</span>),</span><br><span class="line">        inverseJoinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"tag_id"</span>))</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Tag&gt; tags = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTag</span><span class="params">(Tag tag)</span> </span>&#123;</span><br><span class="line">        tags.add(tag);</span><br><span class="line">        tag.getPosts().add(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeTag</span><span class="params">(Tag tag)</span> </span>&#123;</span><br><span class="line">        tags.remove(tag);</span><br><span class="line">        tag.getPosts().remove(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// equals &amp;&amp; hashCode</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"Tag"</span>)</span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tag"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tag</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ManyToMany</span>(mappedBy = <span class="string">"tags"</span>)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Post&gt; posts = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// equals &amp;&amp; hashCode</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于有额外字段的多对多关联，可以参考 <a href="https://vladmihalcea.com/the-best-way-to-map-a-many-to-many-association-with-extra-columns-when-using-jpa-and-hibernate/" target="_blank" rel="noopener">The best way to map a many-to-many association with extra columns when using JPA and Hibernate</a></p><p><img src="15440817804559.png" alt=""></p><h2 id="只读查询添加上只读事务"><a href="#只读查询添加上只读事务" class="headerlink" title="只读查询添加上只读事务"></a>只读查询添加上只读事务</h2><p>使用只读事务， detach 状态的记录不再被 Persistence Context保存，可以减少内存的使用和 GC 消耗的时间。</p><h2 id="适当设置-DB-连接池的大小"><a href="#适当设置-DB-连接池的大小" class="headerlink" title="适当设置 DB 连接池的大小"></a>适当设置 DB 连接池的大小</h2><p>数据库连接池太大或者太小都会影响性能。太小，会等待连接的获取消耗太多时间；太大，时间消耗在线程的上下文切换上。默认情况下，JPA 的数据库连接池大小为10（够用)，各位可以根据自身应用的情况，设置比较合适的大小。</p><p>另外连接池的大小设置，要考虑到死锁的情况。之前我们遇到过这样的问题：我们使用了一个框架，除了在 Spring Boot 业务中使用了连接，在连接没有关闭的时候，框架又去申请了新的数据库连接。在框架处理完之后，两个连接会全部释放。假设现在，连接池有2个连接，在并发的时候，请求 A 和请求 B 同时获取了一个连接，这是 A 要调用框架，框架去连接池获取一个新的连接。这时数据库连接池的连接已经在使用了，请求 A 的处理线程只能等待；同样请求 B 的处理线程也只能等待。等待最终超时，程序报错。</p><p>那么如何避免连接池出现死锁的情况呢?</p><pre><code>pool_size = Tn x (Cm - 1) + 1</code></pre><p>T 指得是程序的进程数；C 指的是每个进程执行的线程数。重点在于后面要有一个空余的连接。</p><p>如何找到合适的连接池大小，请参考另外一篇文章: <a href="#">TBD</a></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="从源码层面实现代码增强"><a href="#从源码层面实现代码增强" class="headerlink" title="从源码层面实现代码增强:"></a>从源码层面实现代码增强:</h3><p>在build.gradle 文件中，添加代码增强的插件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># build.gradle</span><br><span class="line">buildscript &#123;</span><br><span class="line">ext &#123;</span><br><span class="line">hibernateVersion = &apos;5.2.17.Final&apos;&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    classpath(&quot;org.hibernate:hibernate-gradle-plugin:$&#123;hibernateVersion&#125;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: &apos;org.hibernate.orm&apos;</span><br><span class="line"></span><br><span class="line">hibernate &#123;</span><br><span class="line">enhance &#123;</span><br><span class="line">// Whether enhancement for lazy attribute loading should be done.</span><br><span class="line">enableLazyInitialization = true</span><br><span class="line">// Whether enhancement for self-dirty tracking should be done.</span><br><span class="line">enableDirtyTracking = true</span><br><span class="line">// Whether enhancement for bi-directional association management should be done</span><br><span class="line">enableAssociationManagement = true</span><br><span class="line">enableExtendedEnhancement = false</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 在需要懒加载的关联关系(OneToOne/ManyToOne)上添加: <code>@LazyToOne(LazyToOneOption.NO_PROXY)</code>. 需要注意的是，IDEA 并不支持该插件，需要在设置中，将 gradle 的 Runner 设置为代理到 gradle。<br> <img src="15440677845389.jpg" alt=""></p><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ul><li><a href="https://vladmihalcea.com/the-best-way-to-lazy-load-entity-attributes-using-jpa-and-hibernate/" target="_blank" rel="noopener">The best way to lazy load entity attributes using JPA and Hibernate</a></li><li><a href="https://vladmihalcea.com/the-best-way-to-implement-equals-hashcode-and-tostring-with-jpa-and-hibernate/" target="_blank" rel="noopener">The best way to implement equals, hashCode, and toString with JPA and Hibernate</a></li><li><a href="https://vladmihalcea.com/hibernate-facts-equals-and-hashcode/" target="_blank" rel="noopener">How to implement Equals and HashCode for JPA entities</a></li><li><a href="https://vladmihalcea.com/uuid-identifier-jpa-hibernate/" target="_blank" rel="noopener">https://vladmihalcea.com/uuid-identifier-jpa-hibernate/</a></li><li><a href="https://vladmihalcea.com/the-open-session-in-view-anti-pattern/" target="_blank" rel="noopener">The Open Session In View Anti-Pattern</a></li><li><a href="https://vladmihalcea.com/how-to-store-date-time-and-timestamps-in-utc-time-zone-with-jdbc-and-hibernate/" target="_blank" rel="noopener">How to store date, time, and timestamps in UTC time zone with JDBC and Hibernate</a></li><li><a href="https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing" target="_blank" rel="noopener">About Pool Sizing</a></li><li><a href="https://vladmihalcea.com/the-open-session-in-view-anti-pattern/" target="_blank" rel="noopener">The Open Session In View Anti-Pattern</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-设置数据库存储时间的时区&quot;&gt;&lt;a href=&quot;#1-设置数据库存储时间的时区&quot; class=&quot;headerlink&quot; title=&quot;1. 设置数据库存储时间的时区&quot;&gt;&lt;/a&gt;1. 设置数据库存储时间的时区&lt;/h2&gt;&lt;p&gt;如果某个应用考虑到国际化，服务会部署在多
      
    
    </summary>
    
      <category term="java" scheme="https://polarlights.github.io/categories/java/"/>
    
      <category term="hibernate" scheme="https://polarlights.github.io/categories/java/hibernate/"/>
    
      <category term="jpa" scheme="https://polarlights.github.io/categories/java/hibernate/jpa/"/>
    
    
      <category term="java" scheme="https://polarlights.github.io/tags/java/"/>
    
      <category term="jpa" scheme="https://polarlights.github.io/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>Add release to sentry</title>
    <link href="https://polarlights.github.io/2018/11/12/add-release-to-sentry/"/>
    <id>https://polarlights.github.io/2018/11/12/add-release-to-sentry/</id>
    <published>2018-11-12T13:24:39.000Z</published>
    <updated>2019-08-11T09:30:13.722Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://sentry.io" target="_blank" rel="noopener">Sentry</a> 是一个开源的，用来帮助开发监控异常和跟进错误修复的服务。</p><p>Java 集成 Sentry 十分地方便，很方便地就可以实现异常的监控。如果我们想更加精细化地区分某个错误是在哪个版本中出现的，需要我们额外将 release 信息告知 Sentry。具体怎么操作呢？</p><h2 id="1-添加SentryConfig配置类，将相关信息注入到-Sentry"><a href="#1-添加SentryConfig配置类，将相关信息注入到-Sentry" class="headerlink" title="1. 添加SentryConfig配置类，将相关信息注入到 Sentry"></a>1. 添加<code>SentryConfig</code>配置类，将相关信息注入到 Sentry</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentryConfig</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;application.host.name:localhost&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String hostName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;application.module.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serviceName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.profiles.active&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String activeProfile;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;release.version:local&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String releaseVersion;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将 sentry 的配置放到 application.properties 中，</span></span><br><span class="line">    <span class="comment">// 可以根据环境配置到不同 sentry 服务地址</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;sentry.dsn&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String sentryDsn;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;sentry.timeout&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String sentryTimeout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MDC.put(<span class="string">"Host"</span>, hostName);</span><br><span class="line">        MDC.put(<span class="string">"Module"</span>, serviceName);</span><br><span class="line">        MDC.put(<span class="string">"Profile"</span>, activeProfile);</span><br><span class="line"></span><br><span class="line">        System.setProperty(<span class="string">"sentry.environment"</span>, activeProfile);</span><br><span class="line">        System.setProperty(<span class="string">"sentry.release"</span>, releaseVersion);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(sentryDsn)) &#123;</span><br><span class="line">            System.setProperty(<span class="string">"sentry.dsn"</span>, sentryDsn);</span><br><span class="line">            System.setProperty(<span class="string">"sentry.timeout"</span>, sentryTimeout);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要解决 <code>release.version</code> 从哪里获取，简单一些可以把 <code>project.version</code>在 build 的时候，写入到<code>application.properties</code>中。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">task createProperties(<span class="string">dependsOn:</span> processResources) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        <span class="keyword">def</span> releaseVersion = <span class="string">'release.version='</span> + project.version.toString()</span><br><span class="line">        <span class="keyword">def</span> file = <span class="keyword">new</span> File(<span class="string">"$buildDir/resources/main/application.properties"</span>)</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            file.append(releaseVersion)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        file = <span class="keyword">new</span> File(<span class="string">"$projectDir/resources/main/application.properties"</span>)</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            file.append(releaseVersion)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">classes &#123;</span><br><span class="line">    dependsOn createProperties</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以继续完善：在版本信息的基础上把 Git 的 Commit ID 也加上，可以这样做：</p><h2 id="方法-1-添加gradle-git-version"><a href="#方法-1-添加gradle-git-version" class="headerlink" title="方法 1. 添加gradle-git-version"></a>方法 1. 添加<a href="https://github.com/palantir/gradle-git-version" target="_blank" rel="noopener">gradle-git-version</a></h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;    </span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(<span class="string">'gradle.plugin.com.palantir.gradle.gitversion:gradle-git-version:0.11.0'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.palantir.git-version'</span></span><br></pre></td></tr></table></figure><p>添加这个插件后，我们可以调用<code>versionDetails()</code>获取当前项目的一些信息：</p><pre><code>def details = versionDetails()details.lastTagdetails.commitDistancedetails.gitHashdetails.gitHashFull // full 40-character Git commit hashdetails.branchName // is null if the repository in detached HEAD modedetails.isCleanTag</code></pre><p>里面有我们需要的<code>gitHash</code>，所以我们上面的脚本就可以修改为:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">task createProperties(<span class="string">dependsOn:</span> processResources) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        <span class="keyword">def</span> releaseVersion = <span class="string">'release.version='</span> + project.version.toString() = <span class="string">'-'</span> + versionDetails().gitHash</span><br><span class="line">        <span class="keyword">def</span> file = <span class="keyword">new</span> File(<span class="string">"$buildDir/resources/main/application.properties"</span>)</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            file.append(releaseVersion)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        file = <span class="keyword">new</span> File(<span class="string">"$projectDir/resources/main/application.properties"</span>)</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            file.append(releaseVersion)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">classes &#123;</span><br><span class="line">    dependsOn createProperties</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的实现需要添加较多地配置，我们可以使用另外一个 gradle 插件<a href="https://github.com/n0mer/gradle-git-properties" target="_blank" rel="noopener">gradle-git-properties</a> 达到类似的效果：</p><h2 id="方法-2：使用-gradle-git-properties-插件"><a href="#方法-2：使用-gradle-git-properties-插件" class="headerlink" title="方法 2：使用 gradle-git-properties 插件"></a>方法 2：使用 gradle-git-properties 插件</h2><ol><li>添加依赖：</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(<span class="string">"gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.5.1"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.gorylenko.gradle-git-properties'</span></span><br></pre></td></tr></table></figure><p>gradle-git-properties 会添加一个<strong>generateGitProperties</strong>的任务，执行之后生成<code>git.properties</code>；它相较于 git-version 提供的内容更多：</p><pre><code>git.branchgit.build.hostgit.build.timegit.build.user.emailgit.build.user.namegit.build.versiongit.closest.tag.commit.countgit.closest.tag.namegit.commit.idgit.commit.id.abbrevgit.commit.id.describegit.commit.message.fullgit.commit.message.shortgit.commit.timegit.commit.user.emailgit.commit.user.namegit.dirtygit.remote.origin.urlgit.tagsgit.total.commit.count</code></pre><p>我们需要的是<code>git.commit.id.abbrev</code>，为了输出<code>release.version</code>我们需要添加一行配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build.gradle</span></span><br><span class="line">gitProperties &#123;</span><br><span class="line">    customProperty <span class="string">'release.version'</span>, &#123; project.version + <span class="string">"-"</span> + it.head().abbreviatedId &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为它生成的 properties 文件默认不会加载，需要在<code>SentryConfig</code>上添加<code>@PropertySource</code>注解，加载它:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:git.properties"</span>, ignoreResourceNotFound = <span class="keyword">true</span>)</span><br></pre></td></tr></table></figure></p><p>在程序抛出异常后，我们就可以在 Sentry 中看到异常信息已经包含了应用的版本及 commitId 信息了：<br><img src="/2018/11/12/add-release-to-sentry/15420289952643.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://sentry.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sentry&lt;/a&gt; 是一个开源的，用来帮助开发监控异常和跟进错误修复的服务。&lt;/p&gt;
&lt;p&gt;Java 集成 Sentry 十分地方便，很方便地就可以实现异
      
    
    </summary>
    
      <category term="java" scheme="https://polarlights.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://polarlights.github.io/tags/java/"/>
    
      <category term="sentry" scheme="https://polarlights.github.io/tags/sentry/"/>
    
  </entry>
  
  <entry>
    <title>JPA stream query with java8</title>
    <link href="https://polarlights.github.io/2018/11/11/jpa-stream-query/"/>
    <id>https://polarlights.github.io/2018/11/11/jpa-stream-query/</id>
    <published>2018-11-11T08:00:00.000Z</published>
    <updated>2019-08-11T09:30:13.742Z</updated>
    
    <content type="html"><![CDATA[<p>最近有小伙伴在做批量导出数据的功能，原来是这样写的：<br><img src="/2018/11/11/jpa-stream-query/15417517310823.jpg"></p><p>后来在看其他代码的时候，有个类似功能，突然意识到那个代码在数据量很大的时候，会存在性能问题（最坏会OOM，导致不可用)。后面在交流过程中，小伙伴突然想到上面那个代码也会有类似问题。</p><p>在 Rails 的 ActiveRecord 中有<code>find_in_batches</code>功能，它会生成<code>select ... from XX where id &gt; ? limit N offset M</code>类似的 SQL，实现批量查询。</p><p>在 Java 中，首先想到的是使用 Pagable 翻页查找，但是这个不是很优雅，要自己去处理总页数、当前页等数据。</p><p>有没有更优雅一些的做法呢？搜索之后，发现了两篇文章：</p><ol><li><a href="http://knes1.github.io/blog/2015/2015-10-19-streaming-mysql-results-using-java8-streams-and-spring-data.html" target="_blank" rel="noopener">Streaming MySQL Results Using Java 8 Streams and Spring Data JPA</a></li><li><a href="https://vladmihalcea.com/whats-new-in-jpa-2-2-stream-the-result-of-a-query-execution/" target="_blank" rel="noopener">What’s new in JPA 2.2 – Stream the result of a Query execution</a></li></ol><p>原来 JPA 早就支持了 Java 8 的 stream。使用 Pageable 翻页方法，与 stream 的相比，多了 DB offset 的操作；后者实质上使用的是数据库的游标。</p><p>第一篇文章的内容结合自己业务数据，对文章内容作了一次验证：</p><p>测试数据库的 Post 表有 56W 条数据。<br>测试机器信息：</p><blockquote><p>CPU: i7 2.3GHz<br>Memory: 8GBx2 1600MHz DDR3</p></blockquote><p>测试代码:</p><ul><li>case 1:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># PostRepository.java </span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"select p from Post p"</span>)</span><br><span class="line"><span class="function">Stream&lt;Post&gt; <span class="title">streamAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p>case 2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># PostRepository.java case 1:</span><br><span class="line"><span class="meta">@QueryHints</span>(value = <span class="meta">@QueryHint</span>(name = HINT_FETCH_SIZE, value = <span class="string">""</span> + Integer.MINI_VALUE))</span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"select p from Post p"</span>)</span><br><span class="line"><span class="function">Stream&lt;Post&gt; <span class="title">streamAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>case 3:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># PostRepository.java case 1:</span><br><span class="line"><span class="meta">@QueryHints</span>(value = <span class="meta">@QueryHint</span>(name = HINT_FETCH_SIZE, value = <span class="string">"200"</span>)</span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"select p from Post p"</span>)</span><br><span class="line"><span class="function">Stream&lt;Post&gt; <span class="title">streamAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li></ul><p>需要注意的是，在调用 Repository 的地方，要显示声明为只读事务，否则会抛出异常。</p><h2 id="没有堆-Heap-大小限制的情况下："><a href="#没有堆-Heap-大小限制的情况下：" class="headerlink" title="没有堆(Heap)大小限制的情况下："></a>没有堆(Heap)大小限制的情况下：</h2><ul><li>case 1:</li></ul><p>正常工作</p><img src="/2018/11/11/jpa-stream-query/15417527402090.jpg"><ul><li>case 2:</li></ul><p>正常工作</p><img src="/2018/11/11/jpa-stream-query/15417527637481.jpg"><ul><li>case 3:</li></ul><p>正常工作</p><img src="/2018/11/11/jpa-stream-query/15417527764295.jpg"><p>以上3个时间相差不大。</p><h2 id="将堆大小做了限制"><a href="#将堆大小做了限制" class="headerlink" title="将堆大小做了限制"></a>将堆大小做了限制</h2><p>参数：<code>-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1 -Xmx1080m -Xms512m</code></p><p>在几个测试案例中，只有case 2可以正常工作，且比前面的速度快了1/3。其它两种 case 全部不能正正常工作，最终 OOM，而且 GC 时间非常多。</p><ul><li>case 1:</li></ul><img src="/2018/11/11/jpa-stream-query/15417529616240.jpg"><ul><li>case 2:</li></ul><img src="/2018/11/11/jpa-stream-query/15417529776586.jpg"><ul><li>case 3:</li></ul><img src="/2018/11/11/jpa-stream-query/15417529893759.jpg"><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>使用 stream 查询大量数据的时候，务必要添加<code>@QueryHints(value = @QueryHint(name = HINT_FETCH_SIZE, value = &quot;&quot; + Integer.MIN_VALUE))</code>注解，它可以在保证速度的同时，内存可以得到很好的控制。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近有小伙伴在做批量导出数据的功能，原来是这样写的：&lt;br&gt;&lt;img src=&quot;/2018/11/11/jpa-stream-query/15417517310823.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;后来在看其他代码的时候，有个类似功能，突然意识到那个代码在数据量很大的时候，会存
      
    
    </summary>
    
      <category term="JPA" scheme="https://polarlights.github.io/categories/JPA/"/>
    
      <category term="Java" scheme="https://polarlights.github.io/categories/JPA/Java/"/>
    
    
      <category term="Java" scheme="https://polarlights.github.io/tags/Java/"/>
    
      <category term="JPA" scheme="https://polarlights.github.io/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>Mac mail app tricks</title>
    <link href="https://polarlights.github.io/2018/11/09/mac-mail-tricks/"/>
    <id>https://polarlights.github.io/2018/11/09/mac-mail-tricks/</id>
    <published>2018-11-09T02:05:12.000Z</published>
    <updated>2019-08-11T09:30:13.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h2><p>1.修改邮件的一些默认设置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disable send and reply animations in Mail.app</span></span><br><span class="line">defaults write com.apple.mail DisableReplyAnimations -bool <span class="literal">true</span></span><br><span class="line">defaults write com.apple.mail DisableSendAnimations -bool <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy email addresses as `foo@example.com` instead of `Foo Bar &lt;foo@example.com&gt;` in Mail.app</span></span><br><span class="line">defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the keyboard shortcut ⌘ + Enter to send an email in Mail.app</span></span><br><span class="line">defaults write com.apple.mail NSUserKeyEquivalents -dict-add <span class="string">"Send"</span> <span class="string">"@\U21a9"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Display emails in threaded mode, sorted by date (oldest at the top)</span></span><br><span class="line">defaults write com.apple.mail DraftsViewerAttributes -dict-add <span class="string">"DisplayInThreadedMode"</span> -string <span class="string">"yes"</span></span><br><span class="line">defaults write com.apple.mail DraftsViewerAttributes -dict-add <span class="string">"SortedDescending"</span> -string <span class="string">"yes"</span></span><br><span class="line">defaults write com.apple.mail DraftsViewerAttributes -dict-add <span class="string">"SortOrder"</span> -string <span class="string">"received-date"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable inline attachments (just show the icons)</span></span><br><span class="line">defaults write com.apple.mail DisableInlineAttachmentViewing -bool <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable automatic spell checking</span></span><br><span class="line">defaults write com.apple.mail SpellCheckingBehavior -string <span class="string">"NoSpellCheckingEnabled"</span></span><br></pre></td></tr></table></figure></p><h2 id="邮件分类放在不同目录下"><a href="#邮件分类放在不同目录下" class="headerlink" title="邮件分类放在不同目录下"></a>邮件分类放在不同目录下</h2><p>邮件全部放在收件箱里面，不做分类的话，随着邮件越积越多，邮件非常杂乱。我们可以在邮件中添加目录(mail.app 中叫 mailbox)，然后在“Preferences&quot; -&gt; &quot;Rules&quot;，添加新的邮件规则。</p><p>过滤规则中，还可以设置发送通知，以便于我们不错过重要的邮件。</p><h2 id="Smart-Mailbox"><a href="#Smart-Mailbox" class="headerlink" title="Smart Mailbox"></a>Smart Mailbox</h2><p>邮件放在不同目录下会比较有序，但是它只是比较粗的分类，有时我们需要更加定制化的从另外一个层面去透视邮件。比如筛选某些特定发件人、邮件主题、旗标、某个发件日期等邮件。</p><p>在邮箱左侧“Smart Mailboxes&quot;，选择添加，</p><img src="/2018/11/09/mac-mail-tricks/15417270316426.jpg"><h2 id="VIP"><a href="#VIP" class="headerlink" title="VIP"></a>VIP</h2><p>对于某些 Very Import Person 发送的邮件，可以很方便地将其加入到 VIP 列表：在发件人邮箱上点击右键，选择添加到 VIP 即可。</p><h2 id="旗标"><a href="#旗标" class="headerlink" title="旗标"></a>旗标</h2><p>默认旗标只有一些颜色名称，而没有其它语义。给颜色添加一种语义，以方便我们理解。</p><p>先给邮件添加某个旗标，然后在左侧可以看到对应旗标出现；右键选择重命名(或者单击某个旗标，再次点击)，即可对其重命名。如果没有对应旗标的邮件，改旗标不会出现在左侧，也无法对其更名。</p><img src="/2018/11/09/mac-mail-tricks/15417288936047.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用设置&quot;&gt;&lt;a href=&quot;#常用设置&quot; class=&quot;headerlink&quot; title=&quot;常用设置&quot;&gt;&lt;/a&gt;常用设置&lt;/h2&gt;&lt;p&gt;1.修改邮件的一些默认设置&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="Mac" scheme="https://polarlights.github.io/categories/Mac/"/>
    
    
      <category term="Mac" scheme="https://polarlights.github.io/tags/Mac/"/>
    
      <category term="Mail" scheme="https://polarlights.github.io/tags/Mail/"/>
    
      <category term="tricks" scheme="https://polarlights.github.io/tags/tricks/"/>
    
  </entry>
  
  <entry>
    <title>idea popular plugins</title>
    <link href="https://polarlights.github.io/2018/09/19/idea-popular-plugins/"/>
    <id>https://polarlights.github.io/2018/09/19/idea-popular-plugins/</id>
    <published>2018-09-19T15:20:49.000Z</published>
    <updated>2019-08-11T09:30:13.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><ol><li><p><a href="https://plugins.jetbrains.com/plugin/6317-lombok-plugin" target="_blank" rel="noopener">lombok plugin</a></p></li><li><p><a href="https://plugins.jetbrains.com/plugin/185-generateserialversionuid" target="_blank" rel="noopener">GenerateSerialVersionUID</a></p><p> Adds a new action &#39;SerialVersionUID&#39; in the generate menu (alt + ins). The action adds an serialVersionUID field in the current class or updates it if it already exists, and assigns it the same value the standard &#39;serialver&#39; JDK tool would return. The action is only visible when IDEA is not rebuilding its indexes, the class is serializable and either no serialVersionUID field exists or its value is different from the one the &#39;serialver&#39; tool would return.</p></li></ol><h2 id="效率篇"><a href="#效率篇" class="headerlink" title="效率篇"></a>效率篇</h2><ol><li><p><a href="https://plugins.jetbrains.com/plugin/4441-jrebel-for-intellij" target="_blank" rel="noopener">Jrebel for IDEA</a></p><p> JRebel is a productivity tool that allows developers to reload code changes instantly.</p></li><li><p><a href="https://plugins.jetbrains.com/plugin/7642-save-actions" target="_blank" rel="noopener">save actions</a></p><p> Supports configurable, Eclipse like, save actions, including &quot;optimize imports&quot;, &quot;reformat code&quot;, &quot;rearrange code&quot;, &quot;compile file&quot; and some quick fixes for Java like &quot;add / remove &#39;this&#39; qualifier&quot;, etc. The plugin executes the configured actions when the file is synchronised (or saved) on disk.</p></li><li><p><a href="https://plugins.jetbrains.com/plugin/7086-acejump" target="_blank" rel="noopener">ace-jump</a></p><p> AceJump allows you to quickly navigate the caret to any position visible in the editor.</p> <img src="/2018/09/19/idea-popular-plugins/15373699756710.jpg"></li></ol><h2 id="代码质量"><a href="#代码质量" class="headerlink" title="代码质量"></a>代码质量</h2><ol><li><p><a href="https://plugins.jetbrains.com/plugin/1065-checkstyle-idea" target="_blank" rel="noopener">checkstyle</a></p></li><li><p><a href="https://plugins.jetbrains.com/plugin/3847-findbugs-idea" target="_blank" rel="noopener">Find bugs</a></p><p> The FindBugs plugin for IntelliJ IDEA.</p></li><li><p><a href="https://plugins.jetbrains.com/plugin/7973-sonarlint" target="_blank" rel="noopener">SonarLint</a></p><p> SonarLint is an IDE extension that helps you detect and fix quality issues as you write code.</p></li><li><p><a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines" target="_blank" rel="noopener">alibaba-coding-guideline</a></p><p> Alibaba Java Coding Guidelines plugin support.</p> <img src="/2018/09/19/idea-popular-plugins/alibaba.gif" class="alibaba"></li></ol><h2 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h2><ol><li><p><a href="https://plugins.jetbrains.com/plugin/7495--ignore" target="_blank" rel="noopener">ignore</a></p><p> <strong>.ignore</strong> is a plugin for .gitignore (Git), .hgignore (Mercurial), .npmignore (NPM), .dockerignore (Docker), .chefignore (Chef), .cvsignore (CVS), .bzrignore (Bazaar), .boringignore (Darcs), .mtn-ignore (Monotone), ignore-glob (Fossil), .jshintignore (JSHint), .tfignore (Team Foundation), .p4ignore (Perforce), .prettierignore (Prettier), .flooignore (Floobits), .eslintignore (ESLint), .cfignore (Cloud Foundry), .jpmignore (Jetpack), .stylelintignore (StyleLint), .stylintignore (Stylint), .swagger-codegen-ignore (Swagger Codegen), .helmignore (Kubernetes Helm), .upignore (Up), .prettierignore (Prettier), .ebignore (ElasticBeanstalk) files in your project. </p></li><li><p><a href="https://plugins.jetbrains.com/plugin/7793-markdown-support" target="_blank" rel="noopener">markdown-support</a></p><p> Provides the capability to edit markdown files within the IDE and see the rendered HTML in a live preview. </p></li><li><p><a href="https://plugins.jetbrains.com/plugin/7391-asciidoc" target="_blank" rel="noopener">asciidoc</a></p><p> AsciiDoc language support for IntelliJ platform.</p></li></ol><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol start="3"><li><p><a href="https://plugins.jetbrains.com/plugin/164-ideavim" target="_blank" rel="noopener">ideavim</a></p><p> IdeaVim supports many Vim features including normal/insert/visual modes, motion keys, deletion/changing, marks, registers, some Ex commands, Vim regexps, configuration via ~/.ideavimrc, macros, window commands, etc.</p></li><li><p><a href="https://plugins.jetbrains.com/plugin/7125-grep-console" target="_blank" rel="noopener">grep-console</a></p><ol><li>Change colors of matching text.</li><li>Grep output into a new console tab.</li><li>Change output or execute any action using custom groovy scripts or plugins.</li><li>Filter out unwanted lines.</li><li>Fold output.</li><li>Play sounds on matches.</li><li>Clear Console on matches.</li><li><p>Tail files*.</p><img src="/2018/09/19/idea-popular-plugins/15373698266180.jpg"><img src="/2018/09/19/idea-popular-plugins/15373698363530.jpg"></li></ol></li><li><p><a href="https://plugins.jetbrains.com/plugin/9792-key-promoter-x" target="_blank" rel="noopener">key-promoter-x</a></p><p> Shows the user the keyboard short-cuts when a button is pressed with the mouse. This provides an easy way to learn how to replace tedious mouse work with keyboard keys and helps to transition to a faster, mouse free development. Currently, it supports toolbar buttons, menu buttons, and tool windows and the actions therein. </p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本&quot;&gt;&lt;a href=&quot;#基本&quot; class=&quot;headerlink&quot; title=&quot;基本&quot;&gt;&lt;/a&gt;基本&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://plugins.jetbrains.com/plugin/6317-lombok-plu
      
    
    </summary>
    
      <category term="editor" scheme="https://polarlights.github.io/categories/editor/"/>
    
    
      <category term="idea" scheme="https://polarlights.github.io/tags/idea/"/>
    
      <category term="plugins" scheme="https://polarlights.github.io/tags/plugins/"/>
    
  </entry>
  
  <entry>
    <title>idea productive tips</title>
    <link href="https://polarlights.github.io/2018/09/19/idea-productive-tips/"/>
    <id>https://polarlights.github.io/2018/09/19/idea-productive-tips/</id>
    <published>2018-09-19T15:20:49.000Z</published>
    <updated>2019-08-11T09:30:13.742Z</updated>
    
    <content type="html"><![CDATA[<p>This article is wroten according to a youtube video: <a href="https://www.youtube.com/watch?v=eq3KiAH4IBI" target="_blank" rel="noopener">https://www.youtube.com/watch?v=eq3KiAH4IBI</a>.</p><p>We use Idea programming everyday. How can we use it effectively, now let&#39;s reading it below:</p><ol><li><p>Close the tab list of IDE</p><p> Preferences → Editor → Editor Tabs; Change Tab Placement from default <strong>Top</strong> to <strong>None</strong>.</p><p> Tab is annoying when many files are opened. It&#39;s hard to find file when opening to many files, which it&#39;s inevitable. Use recent files window or search everywhere (Double Shift). We can use <strong>⌘+E</strong> to explore recent files instead.</p></li><li><p>Auto scroll to source</p><p> When we select a file, we want to explore the file content, other than just the file name. If we want to see the source, we have to double click the file in project window, by default. While Idea provides us a feature that when we select a file, Idea will open the source automatically:<br> In the project window, right top of the window, click the config icon, check the &quot;scroll to source&quot; in the dropdown list.</p></li><li><p>Create directory or file effectivelly</p><p>If I want to create a nested directory or package, I will select the parent directory and press <code>⌘+N</code>, then input the directory name, before. There&#39;s more effective way: Just input the relative directory path, Idea will create the sub directory for us, if it doesn&#39;t exist.</p><p>We can create file or directory through the navigation bar.</p></li><li><p>Search file or class by search</p><p> Double shift(press shift double times) is our friend, it pops up a search window which we can search file, class. It will list the more recent used files at the file lists. </p></li><li><p>Scratch file feature</p><p> It is a very common scenario that we want test a piece of code outside of the project context. We can press <strong>⌘+⇧+N</strong> to create a scratch file which will be removed after we finish test. See more details, please visit <a href="https://www.jetbrains.com/help/idea/scratches.html" target="_blank" rel="noopener">https://www.jetbrains.com/help/idea/scratches.html</a></p></li><li><p>Shrink Selection:</p><p> Increase selection: <strong>⌥ + ↑</strong><br> Shrink selection: <strong>⌥ + ↓</strong></p></li><li><p>Move code block</p><p> move code block up: <strong>⌥ + ⇧ + ↑</strong><br> move code block down: <strong>⌥ + ⇧ + ↓</strong></p></li><li><p>Rename (Refectory)</p><p> Shift + F6</p></li><li><p>Auto comple</p><p> Please follow both steps:</p><ol><li><ul><li>Enable Automake from the compiler<br>Press: ctrl + shift + A (For Mac ⌘ + shift + A)<br>Type: make project automatically<br>Hit: Enter<br>Enable Make Project automatically feature</li></ul></li><li><ul><li>Enable Automake when the application is running<br>Press: ctrl + shift + A (For Mac ⌘ + shift + A)<br>Type: Registry<br>Find the key compiler.automake.allow.when.app.running and enable it or click the checkbox next to it</li></ul></li></ol></li><li><p>Auto wrap code</p><ul><li><p>When editing code:</p><p>File → Editor → Code Style → Java → Wrappings And Brackets</p><p>Change: Wrap On Typing → true</p></li><li><p>When viewing code:</p><p><a href="https://stackoverflow.com/questions/23004520/code-wrap-intellij" target="_blank" rel="noopener">https://stackoverflow.com/questions/23004520/code-wrap-intellij</a> </p></li></ul></li><li><p>Insert Language Template</p><p> <a href="https://www.jetbrains.com/help/idea/using-language-injections.html" target="_blank" rel="noopener">https://www.jetbrains.com/help/idea/using-language-injections.html</a></p></li><li><p>Navigation Bar</p><p> Command + ↑</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This article is wroten according to a youtube video: &lt;a href=&quot;https://www.youtube.com/watch?v=eq3KiAH4IBI&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;
      
    
    </summary>
    
      <category term="editor" scheme="https://polarlights.github.io/categories/editor/"/>
    
    
      <category term="idea" scheme="https://polarlights.github.io/tags/idea/"/>
    
      <category term="editor" scheme="https://polarlights.github.io/tags/editor/"/>
    
  </entry>
  
  <entry>
    <title>那些好用的工具之 Tmux 篇</title>
    <link href="https://polarlights.github.io/2018/09/18/tmux-tutorial/"/>
    <id>https://polarlights.github.io/2018/09/18/tmux-tutorial/</id>
    <published>2018-09-18T12:03:32.000Z</published>
    <updated>2019-08-11T09:30:13.750Z</updated>
    
    <content type="html"><![CDATA[<p>工欲善其事，必先利其器。突然来了兴致，想利用一下睡觉前的时间，整理一下自己用过的，感觉很棒的命令行工具，作为一个系列。其中有的工具会比较复杂，有的会比较简单。复杂的，多写一些。简单的，拼盘拼成一篇。</p><p>今天的主题是 Tmux。</p><img src="/2018/09/18/tmux-tutorial/15152533520178.jpg"><h2 id="一-Tmux-是什么？"><a href="#一-Tmux-是什么？" class="headerlink" title="一. Tmux 是什么？"></a>一. Tmux 是什么？</h2><p><a href="https://github.com/tmux/tmux" target="_blank" rel="noopener">Tmux</a> 是一个终端复用工具。它可以允许在一个窗口创建、访问以及控制的多个终端。</p><h2 id="二-Tmux-解决了什么问题？"><a href="#二-Tmux-解决了什么问题？" class="headerlink" title="二. Tmux 解决了什么问题？"></a>二. Tmux 解决了什么问题？</h2><ul><li>Alice SSH 登录到远程机器，对机器进行维护。她要跑一个任务耗时很久。程序已经开始跑了。但是……中间发生了一个小插曲：Alice 因为自己电脑的故障，断开了远程机器的连接。结果因为执行任务的父进程被杀掉，导致程序跑了一半，被杀掉了。Alice 又需要从头开始执行。Poor Alice...</li><li><p>Bob 平时使用 Vim 开发自己的项目。他一边要编辑代码，一边要做 Debug，一边需要一个交互式 Shell 查询数据库的数据情况。于是 Bob 开了3个 Tab 窗口来回切换。他发现，这样操作太麻烦了，需要来回手动切换 Tab 才可以看到自己想看的内容。</p><p>有小伙伴给他推荐了 iTerm2，它可以支持分割窗口。Bob 使用了一阵子后，依然觉得不爽：a. 不够灵活 b. 不小心关掉后窗口或 Tab 后，在执行的命令同样会中断。c. 切出来的窗口，停留在 Home 目录，需要手动执行<code>cd</code>命令，才能跳转到工作目录。</p><img src="/2018/09/18/tmux-tutorial/15152542845524.jpg"></li></ul><p>有了 Tmux 上面的问题，都迎刃而解。它可以：</p><ol><li>在目标机器上运行，可以后台运行，即使网络连接断开也不受影响。</li><li>很方便的切换窗口，而且还可以自动切换到工作目录。</li><li>支持配置，通过配置文件管理初始化会话时的窗口及执行的命令。</li><li>支持 Pair Programming。</li></ol><h2 id="三-一些概念"><a href="#三-一些概念" class="headerlink" title="三. 一些概念"></a>三. 一些概念</h2><img src="/2018/09/18/tmux-tutorial/15154155956817.jpg"><h3 id="1-Server"><a href="#1-Server" class="headerlink" title="1. Server"></a>1. Server</h3><p>Tmux 能够让用户断连后，重新登录回来，可以保留工作现场的原因是，它本身是 C/S 架构的。Server 和 各个客户端之间通过在<code>/tmp/</code>的 socket 来进行通信。</p><p>Tmux 启动的时候，默认会创建一个Session（会话）。</p><h3 id="2-Session"><a href="#2-Session" class="headerlink" title="2. Session"></a>2. Session</h3><p>Session 是在 tmux 管理下的虚拟终端的集合。每个 Session 下面会有很多窗口(Window)</p><h3 id="3-Window"><a href="#3-Window" class="headerlink" title="3. Window"></a>3. Window</h3><p>Window 是单个可见的窗口，它有自己的编号，默认从0开始。Window 可以被分割成很多的 Pane（窗格)。</p><h3 id="4-Pane"><a href="#4-Pane" class="headerlink" title="4. Pane"></a>4. Pane</h3><p> 就像一个大窗户会有很多小窗格一样，tmux 可以很方便的将窗口分割成一个个的小格子，每个格子可以称之为：Pane。</p><p> 他们之间的关系可以很形象地用一张图来标明：</p> <h3 id="5-Prefix-Key"><a href="#5-Prefix-Key" class="headerlink" title="5. Prefix Key"></a>5. Prefix Key</h3> <img src="/2018/09/18/tmux-tutorial/15154156612162.jpg"><h2 id="四-安装"><a href="#四-安装" class="headerlink" title="四. 安装"></a>四. 安装</h2><ul><li>Ubuntu</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tmux</span><br></pre></td></tr></table></figure><ul><li>macOSX</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tmux</span><br></pre></td></tr></table></figure><h2 id="五-常用操作及配置"><a href="#五-常用操作及配置" class="headerlink" title="五. 常用操作及配置"></a>五. 常用操作及配置</h2><h4 id="1-操作会话"><a href="#1-操作会话" class="headerlink" title="1. 操作会话"></a>1. 操作会话</h4><p>tmux 创建会话很简单，只需要在终端输入 <code>tmux</code> 就可以，个人不推荐在日常使用中这样做。因为人比较擅长记忆有语义性的东西，建议在启动的时候指定 session 的名字: <code>tmux new -s sessionA</code>。界面启动后是这样的：</p><p>如何查看现在正在运行的 session 列表呢？<code>tmux ls</code>，它就会列出所有的 session 列表。</p><p>如果我们想 attatch 到特定的 session，我们可以执行<code>tmux at -t [sessionName]</code>。</p><p>有些 session 在创建了之后，我们不想再看到它。处女座的盆友们不能忍。执行<code>tmux kill -t [sessionName]</code>。</p><p>那如果想干掉整个 tmux 服务呢？ <code>tmux kill-server</code>。</p><pre><code># 切换sessionbind -r ( switch-client -p bind -r  ) switch-client -n</code></pre><p>普遍用户对之不太习惯。我们可以对它做一下设置，使之符合我们的日常使用习惯。</p><h4 id="2-通用配置"><a href="#2-通用配置" class="headerlink" title="2. 通用配置"></a>2. 通用配置</h4><p>我们先看一张键盘图：</p><img src="/2018/09/18/tmux-tutorial/15154208245016.jpg" class="ADM-3A keyboard"><p>是不是觉得很怪异？上图是 ADM-3A 的键盘图，实际上也是 vi 编辑器的默认的按键绑定的图。tmux 的按键同样也是用了 vi 的键盘布局。<br>tmux 的 Prefix 按键是<code>C-b</code>，所以为了方便使用，建议将按键改为 <code>C-a</code>，当然，建议小伙伴们将 Capslock 按键映射成 Ctrl。</p><pre><code># 取消默认绑定的按键，改为 Ctrl-aunbind C-bset -g prefix C-a# 设置 prefix,防止 tmux 按键和程序按键冲突。比如c-a 在 vim 配置为全选,在运行 tmux 时，需要先按 c-a,然后再按 vim 中的 c-abind C-a send-prefix# 修改默认延迟时间set -g escape-time 0# 设置终端颜色，有时 vim 的 colortheme 有问题，设置它可以解决set -g default-terminal &quot;screen-256color&quot;# 重新加载配置文件bind r source ~/.tmux.conf \; display &quot;Configuration reloaded!&quot;# 设置历史大小set -g history-limit 10000</code></pre><h4 id="3-切换窗口"><a href="#3-切换窗口" class="headerlink" title="3. 切换窗口"></a>3. 切换窗口</h4><pre><code>#设置 window 窗口 index 默认开始值set -g base-index 1#设置 pane 的 index 默认起始值set -g pane-base-index 1#分割窗口unbind &apos;&quot;&apos;bind | split-window -hbind-key v split-window -h -p 50 -c &quot;#{pane_current_path}&quot;unbind %bind - split-window -vbind-key s split-window -p 50 -c &quot;#{pane_current_path}&quot;#Disable rename window name of shell commandset-option -g allow-rename off# Renumber the windows of current sessionset -g renumber-windows on#Unbind Space. Not use layout changeunbind Space</code></pre><h4 id="4-操作-Pane"><a href="#4-操作-Pane" class="headerlink" title="4. 操作 Pane"></a>4. 操作 Pane</h4><pre><code>#在 pane 中移动bind h select-pane -L bind j select-pane -D bind k select-pane -U bind l select-pane -R#调整 pane大小bind H resize-pane -L 5 bind J resize-pane -D 5 bind K resize-pane -U 5 bind L resize-pane -R 5#pane 转为 windowunbind Upbind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmpunbind Downbind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp</code></pre><h4 id="5-复制粘贴"><a href="#5-复制粘贴" class="headerlink" title="5. 复制粘贴"></a>5. 复制粘贴</h4><h4 id="6-鼠标模式"><a href="#6-鼠标模式" class="headerlink" title="6. 鼠标模式"></a>6. 鼠标模式</h4><h4 id="7-定制样式"><a href="#7-定制样式" class="headerlink" title="7. 定制样式"></a>7. 定制样式</h4><h4 id="8-管理会话"><a href="#8-管理会话" class="headerlink" title="8. 管理会话"></a>8. 管理会话</h4><h4 id="9-结对编程"><a href="#9-结对编程" class="headerlink" title="9. 结对编程"></a>9. 结对编程</h4><h2 id="六-推荐资料"><a href="#六-推荐资料" class="headerlink" title="六. 推荐资料"></a>六. 推荐资料</h2><ol><li><a href="https://pragprog.com/book/bhtmux2/tmux-2" target="_blank" rel="noopener">Productive Mouse-Free Development By Brian P.Hogan</a></li><li>tmux man page.</li><li><a href="https://en.wikipedia.org/wiki/ADM-3A" target="_blank" rel="noopener">ADM-3A</a></li><li><a href="https://github.com/tmux-plugins" target="_blank" rel="noopener">Tmux 插件</a></li><li><a href="https://github.com/tmuxinator/tmuxinator" target="_blank" rel="noopener">Tmuxinator 管理复杂的 tmux 会话</a></li><li>Google :)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工欲善其事，必先利其器。突然来了兴致，想利用一下睡觉前的时间，整理一下自己用过的，感觉很棒的命令行工具，作为一个系列。其中有的工具会比较复杂，有的会比较简单。复杂的，多写一些。简单的，拼盘拼成一篇。&lt;/p&gt;
&lt;p&gt;今天的主题是 Tmux。&lt;/p&gt;
&lt;img src=&quot;/20
      
    
    </summary>
    
      <category term="great tools" scheme="https://polarlights.github.io/categories/great-tools/"/>
    
    
      <category term="tools" scheme="https://polarlights.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Enable reload chagned java and template files In IntelliJ</title>
    <link href="https://polarlights.github.io/2018/01/06/enable-intellij-template-reload/"/>
    <id>https://polarlights.github.io/2018/01/06/enable-intellij-template-reload/</id>
    <published>2018-01-06T09:12:09.000Z</published>
    <updated>2019-08-11T09:30:13.722Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习 Spring Boot 的时候发现真心不如 Ruby on Rails 爽，其中一点是：RoR 在 开发模式下默认可以自动 reload 相关路径下的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ bin/rails r <span class="string">'puts ActiveSupport::Dependencies.autoload_paths'</span></span><br><span class="line">.../app/assets</span><br><span class="line">.../app/controllers</span><br><span class="line">.../app/helpers</span><br><span class="line">.../app/mailers</span><br><span class="line">.../app/models</span><br><span class="line">.../app/controllers/concerns</span><br><span class="line">.../app/models/concerns</span><br><span class="line">.../<span class="built_in">test</span>/mailers/previews</span><br></pre></td></tr></table></figure><p>在 <code>app/views</code>下的文件在修改后也会立即产生效果。</p><p>但是在 Java 世界里，就没有全家桶了。开始的时候很不习惯，需要各种重启，每次重启8-10秒，几乎时时刻刻在和重启打交道。</p><p>还好在 Java 世界里是有解决方法的。</p><h4 id="java"><a href="#java" class="headerlink" title="*.java"></a>*.java</h4><p>java 文件可以使用 <code>spring-boot-devtools</code>，但是，但是，任何在<code>classpath</code>中的文件的变动，都会引起整个程序重启。是的，没看错，是重启。233。好消息是：静态文件和模板文件的变动不会引起程序重启。</p><p>它不会提高太多效率，因为我们需要的是重新加载，而不是重启。</p><p>还好我们有<code>JRebel</code>，在 IntelliJ 的 &quot;Perferences&quot; → &quot;Plugins&quot; → “Browse Repositories&quot;，搜索<code>JRebel</code>，安装插件后重启。安装成功后，在<code>Run</code>菜单下，会多出两个子菜单：a. 使用 JRebel 启动程序。 b. 使用 JRebel 调试程序。</p><p>使用 JRebel 启动程序后，修改源文件，保存后，可以在标准输出看到<code>JRebel: Reloading class &#39;io.polarlights.web.HomeController&#39;.</code>这样的字样，说明它在正常工作了。</p><h4 id="templates"><a href="#templates" class="headerlink" title="templates"></a>templates</h4><ol><li>启用自动构建项目</li></ol><p>File –&gt; Setting –&gt; Build, Execution, Deployment –&gt; Compiler –&gt; check <strong>Build project automatically</strong></p><ol start="2"><li>启用执行时自动编译</li></ol><p>打开 Action 窗口:</p><pre><code>Linux : CTRL+SHIFT+AMac OSX : SHIFT+COMMAND+AWindows : CTRL+ALT+SHIFT+/</code></pre><p> 输入&quot;Registry...&quot;，启用<code>compiler.automake.allow.when.app.running</code></p><h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><h5 id="激活-JRebel"><a href="#激活-JRebel" class="headerlink" title="激活 JRebel"></a>激活 JRebel</h5><ol><li><p>打开 <code>https://my.jrebel.com/</code>，使用 twitter/facebook 账号，填写相关的信息。注意：邮箱请一定不要乱填。就可以收到官方发来的激活码。</p></li><li><img src="/2018/01/06/enable-intellij-template-reload/15152289327942.jpg"></li></ol><p>输入邮箱收到的相关数据就 OK。</p><h5 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h5><ol><li><p><a href="https://www.mkyong.com/spring-boot/intellij-idea-spring-boot-template-reload-is-not-working/" target="_blank" rel="noopener">https://www.mkyong.com/spring-boot/intellij-idea-spring-boot-template-reload-is-not-working/</a></p></li><li><p><a href="http://www.jhipster.tech/configuring-ide-idea/" target="_blank" rel="noopener">http://www.jhipster.tech/configuring-ide-idea/</a></p></li><li><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html</a></p></li><li><p><a href="https://www.jetbrains.com/help/idea/navigating-to-action.html" target="_blank" rel="noopener">https://www.jetbrains.com/help/idea/navigating-to-action.html</a></p></li><li><p><a href="http://guides.rubyonrails.org/autoloading_and_reloading_constants.html" target="_blank" rel="noopener">http://guides.rubyonrails.org/autoloading_and_reloading_constants.html</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在学习 Spring Boot 的时候发现真心不如 Ruby on Rails 爽，其中一点是：RoR 在 开发模式下默认可以自动 reload 相关路径下的文件：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="Intellij" scheme="https://polarlights.github.io/categories/Intellij/"/>
    
      <category term="Java" scheme="https://polarlights.github.io/categories/Intellij/Java/"/>
    
    
      <category term="Java" scheme="https://polarlights.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Switch java versions on Mac OSX</title>
    <link href="https://polarlights.github.io/2017/12/27/how-to-switch-differents-version-of-java-on-mac/"/>
    <id>https://polarlights.github.io/2017/12/27/how-to-switch-differents-version-of-java-on-mac/</id>
    <published>2017-12-27T13:39:52.000Z</published>
    <updated>2019-08-11T09:30:13.726Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司部分产品开始从 Ruby 转到 Java，这应该是很多创业公司走的路吧，在业务变化快速阶段，希望可以使用高效率的开发套件；而到了业务相对稳定以及用户量上升之后，希望可以保证它的稳定性以及高性能。当然最主要的原因是招 Ruby 的小伙伴还是比较有难度. 233.</p><p>比较欣喜的是在 Java 9 中终于有了 Jshell，可以像 Ruby 那样动态调试代码；不过我还是最爱 Ruby On Rails，可以更快地去关注自己的业务，不用啰嗦地去写很多冗余分层的代码。但是我们的核心代码还是使用 Java 8 进行开发，偶尔还需要使用 JShell。</p><p>搞定 java 都需要设置环境变量 <code>JAVA_HOME</code> 的，如果要切换 Java 版本就需要修改 <code>JAVA_HOME</code> 的值。有没有比较好的方式来操作呢？</p><p>当然首先想到的是使用 alias，动态去搞定 Java 的环境变量，比如像这样:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> j9=<span class="string">"export JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk-9.0.1.jdk/Contents/Home'"</span></span><br><span class="line"><span class="built_in">alias</span> j8=<span class="string">"export JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home'"</span></span><br></pre></td></tr></table></figure><p>这样可以解决问题，但是呢，我们要追求优雅，避免写 HARD CODE。</p><p>有没有更好的方法呢？答案必然是：有！</p><p>在 Mac OS X Leopard<a href="https://iengchen.github.io/2016/07/16/best-practice-to-set-java-home-environment-variable-on-mac-osx/" target="_blank" rel="noopener">^java_home</a> 及以后版本，在 <code>/usr/libexec/</code> 开始有了一个命令叫 <code>java_home</code><a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/java_home.1.html" target="_blank" rel="noopener">^apple_java_home</a>。 该命令默认返回当前系统中安装的最高版本的 Java 版本。</p><p>我们先看它支持的参数及含义：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; /usr/libexec/java_home -h</span><br><span class="line">Usage: java_home [options...]</span><br><span class="line">    Returns the path to a Java home directory from the current user<span class="string">'s settings.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Options:</span></span><br><span class="line"><span class="string">    [-v/--version   &lt;version&gt;]       Filter Java versions in the "JVMVersion" form 1.X(+ or *).</span></span><br><span class="line"><span class="string">    [-a/--arch      &lt;architecture&gt;]  Filter JVMs matching architecture (i386, x86_64, etc).</span></span><br><span class="line"><span class="string">    [-d/--datamodel &lt;datamodel&gt;]     Filter JVMs capable of -d32 or -d64</span></span><br><span class="line"><span class="string">    [-t/--task      &lt;task&gt;]          Use the JVM list for a specific task (Applets, WebStart, BundledApp, JNI, or CommandLine)</span></span><br><span class="line"><span class="string">    [-F/--failfast]                  Fail when filters return no JVMs, do not continue with default.</span></span><br><span class="line"><span class="string">    [   --exec      &lt;command&gt; ...]   Execute the $JAVA_HOME/bin/&lt;command&gt; with the remaining arguments.</span></span><br><span class="line"><span class="string">    [-R/--request]                   Request installation of a Java Runtime if not installed.</span></span><br><span class="line"><span class="string">    [-X/--xml]                       Print full JVM list and additional data as XML plist.</span></span><br><span class="line"><span class="string">    [-V/--verbose]                   Print full JVM list with architectures.</span></span><br><span class="line"><span class="string">    [-h/--help]                      This usage information.</span></span><br></pre></td></tr></table></figure><p>对于我们比较有意义的是<code>-v</code>和<code>-V</code>两个参数。<code>-V</code>返回当前系统中安装的 Java 版本，<code>-v</code> 返回指定版本的 Java 的所在目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">╰ ➤ /usr/libexec/java_home -V</span><br><span class="line">Matching Java Virtual Machines (2):</span><br><span class="line">    9.0.1, x86_64:      <span class="string">"Java SE 9.0.1"</span> /Library/Java/JavaVirtualMachines/jdk-9.0.1.jdk/Contents/Home</span><br><span class="line">    1.8.0_152, x86_64:  <span class="string">"Java SE 8"</span>     /Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home</span><br><span class="line"></span><br><span class="line"><span class="comment"># java_home -v</span></span><br><span class="line">╰ ➤ /usr/libexec/java_home -v 9</span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk-9.0.1.jdk/Contents/Home</span><br><span class="line"></span><br><span class="line">╰ ➤ /usr/libexec/java_home -v 1.8</span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home</span><br></pre></td></tr></table></figure><p>现在已经知道了动态获取指定版本 Java 所在目录的方法，那么对之前的 <code>alias</code> 做一下简单重构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> j9=<span class="string">"export JAVA_HOME=`/usr/libexec/java_home -v 9`"</span></span><br><span class="line"><span class="built_in">alias</span> j8=<span class="string">"export JAVA_HOME=`/usr/libexec/java_home -v 1.8`"</span></span><br></pre></td></tr></table></figure><p>现在，我们可以愉快地和多个 Java 版本玩耍了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近公司部分产品开始从 Ruby 转到 Java，这应该是很多创业公司走的路吧，在业务变化快速阶段，希望可以使用高效率的开发套件；而到了业务相对稳定以及用户量上升之后，希望可以保证它的稳定性以及高性能。当然最主要的原因是招 Ruby 的小伙伴还是比较有难度. 233.&lt;/p
      
    
    </summary>
    
      <category term="Mac" scheme="https://polarlights.github.io/categories/Mac/"/>
    
      <category term="Java" scheme="https://polarlights.github.io/categories/Mac/Java/"/>
    
    
      <category term="Java" scheme="https://polarlights.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>how_to_test_class_and_module</title>
    <link href="https://polarlights.github.io/2016/03/23/how-to-test-a-class/"/>
    <id>https://polarlights.github.io/2016/03/23/how-to-test-a-class/</id>
    <published>2016-03-23T14:32:49.000Z</published>
    <updated>2019-08-11T09:30:13.726Z</updated>
    
    <content type="html"><![CDATA[<p>前面我们简要介绍了Minitest的运行原理。知其然而知其所以然，如果了解了<br>别人好的代码是如何设计的，对于自己编码技术的提升会有促进作用。</p><p>好了，我们接下来继续了解如何使用Minitest测试我们的类、模块、model及钩子、控制器和试图。<br>后面还会涉及mock和使用种子数据、定制minitest等内容。</p><p>本文主要讲如何测试我们写的类。</p><p>Ruby是一种面向对象语言非常高的语言，因为即使像数字、纯字符串等都是对象，都有属于它的方法。<br>现实是复杂的，为了方便理解和处理我们遇到的事物、问题、概念，我们会把它抽象为对象，再高级一些<br>就是类。对象是具体的某个事物，类，泛指一类事物。</p><p>假定我们有下面的一个类：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &lt; String</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">palindrome?</span></span></span><br><span class="line">    <span class="keyword">self</span>.reverse.eql? <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>如何测试它呢？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStringTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_should_be_palindrome</span></span></span><br><span class="line">    ms = MyString.new(<span class="string">''</span>)</span><br><span class="line">    assert ms.palindrome?</span><br><span class="line">    ms = MyString.new(<span class="string">'mom'</span>)</span><br><span class="line">    assert ms.palindrome?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_should_not_be_palindrome</span></span></span><br><span class="line">    ms = MyString.new(<span class="string">'name'</span>)</span><br><span class="line">    refute ms.palindrome?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>需要requre Minitest的autorun文件，测试类一般带有<code>Test</code>字样，而且必须继承自Minitest::Test<br>类。具体原因我们在前面分析Minitest的原理时，有谈到。里面的测试方法需要以<code>test_</code>开头，否则<br>不会执行该方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面我们简要介绍了Minitest的运行原理。知其然而知其所以然，如果了解了&lt;br&gt;别人好的代码是如何设计的，对于自己编码技术的提升会有促进作用。&lt;/p&gt;
&lt;p&gt;好了，我们接下来继续了解如何使用Minitest测试我们的类、模块、model及钩子、控制器和试图。&lt;br&gt;后面
      
    
    </summary>
    
      <category term="ruby" scheme="https://polarlights.github.io/categories/ruby/"/>
    
      <category term="minitest" scheme="https://polarlights.github.io/categories/ruby/minitest/"/>
    
    
      <category term="ruby" scheme="https://polarlights.github.io/tags/ruby/"/>
    
      <category term="minitest" scheme="https://polarlights.github.io/tags/minitest/"/>
    
  </entry>
  
  <entry>
    <title>Ruby Class And Module</title>
    <link href="https://polarlights.github.io/2016/03/23/class-and-modules/"/>
    <id>https://polarlights.github.io/2016/03/23/class-and-modules/</id>
    <published>2016-03-23T12:22:28.000Z</published>
    <updated>2019-08-11T09:30:13.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><p>一个类的实例可以使用<code>类名.new</code>来初始化，<code>new</code>方法会自动调用该类的<code>initialize</code>方法，但是由于<code>initialize</code>方法是类的私有方法，所以不能显式的调用它。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span></span><br><span class="line">  <span class="function"><span class="keyword">def</span>  <span class="title">initialize</span><span class="params">(x, y)</span></span></span><br><span class="line">    @x = x</span><br><span class="line">    @y = y</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p = Point.new(<span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>上面的实例<code>p</code>并不能直接访问里面的实例变量@x,@y，因为Ruby是面向对象的语言，所以访问这些实例变量实际上是访问与实例变量的方法而已。如果直接使用<code>p.x</code>，Ruby会告诉你:&quot;NoMethodError: undefined method `x` for #&lt;Point:0x007fc7c40b1ee8 @x=2, @y=4&gt;&quot;。为了能够访问里面的实例变量，我们可以定义对应的访问方法。</p><a id="more"></a><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span>  <span class="title">initialize</span><span class="params">(x, y)</span></span></span><br><span class="line">    @x = x</span><br><span class="line">    @y = y</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">x</span></span></span><br><span class="line">    @x</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">x=</span><span class="params">(x)</span></span></span><br><span class="line">    @x = x</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p = Point.new(<span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><!-- more --> <p>上面我们定义了Point对实例变量x的<code>getter</code>和<code>setter</code>方法，现在我们就可以正常访问x了。如果调用<code>p.x = 4</code>,那么这里实际调用的是<code>p.x=(4)</code>，即调用的为<code>x=</code>方法。</p><p>在Java语言中，getter和setter方法在Bean中是如此的常见，每次写都挺麻烦。那么在Ruby中有没有更好简略方法呢？有。在Ruby中有访问控制器，<code>attr_reader</code>方法定义了那些实例变量可以被外部所使用，<code>attr_accessor</code>方法定义了哪些实例变量可以被外部获取也定义了<code>setter</code>相似的功能，即它是<code>getter</code>和<code>setter</code>方法的合集。</p><p><strong>attr_reader和attr_accessor方法后面可以直接跟变量的名称，也可以使用Symbol，也可以使用字符串</strong></p><p>Ruby使用了常见的数学符号来当做方法，比如；<code>+</code>,<code>-</code>,<code>*</code>，注意，它们不是简单的符号，在Ruby中，它们其实是方法。对于减号操作<code>-</code>，有一元和二元两种形式，一元减的定义要使用<code>-@</code>，在调用的时候为<code>-对象.变量</code>。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span></span><br><span class="line">  <span class="function"><span class="keyword">def</span>  <span class="title">initialize</span><span class="params">(x, y)</span></span></span><br><span class="line">    @x = x</span><br><span class="line">    @y = y</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">+</span><span class="params">(other)</span></span></span><br><span class="line">    <span class="keyword">return</span> Point.new(@x+other.x, @y+other.y)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">-@</span></span></span><br><span class="line">    <span class="keyword">return</span> Point.new(-@x,-@y)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">-</span><span class="params">(other)</span></span></span><br><span class="line">    <span class="keyword">return</span> Point.new(@x-other.x, @y-other.y)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>Duck Typing</strong>：它的含义是：如果它走路像一只鸭子并且也像鸭子一样嘎嘎叫，那它就是一只鸭子。</p><p>对于这句话怎么理解呢？以我们上面的代码为例，在定义<code>+</code>方法时，我们并没有对other作类型的校验，只要other有x,y这两个方法且返回一个数值就可以。如果把Point类当做一只鸭子，而other又像Point一样拥有x,y方法，我们不管它是否真的是Point对象，那么other就是一个&quot;鸭子&quot;。那么如果万一other并没有x或者y方法呢？没有就报异常咯。</p><p>如果我们要添加类型的检查，可以这样做：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">+</span><span class="params">(other)</span></span></span><br><span class="line">  Point.new(@x + other.x, @y + other.y)</span><br><span class="line"><span class="keyword">rescue</span></span><br><span class="line">  raise TypeError, <span class="string">"Point addtion is not like a Point Duck Way"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>俗语有言：条条大道通罗马。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">+</span><span class="params">(other)</span></span></span><br><span class="line">  raise TypeError, <span class="string">"Point addtion is not like a Point Duck Way"</span> <span class="keyword">unless</span></span><br><span class="line">  other.respond_to? <span class="symbol">:x</span> <span class="keyword">and</span> other.respond_to? <span class="symbol">:y</span></span><br><span class="line"></span><br><span class="line">  Point.new(@x + other.x, @y + other.y)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">+</span><span class="params">(other)</span></span></span><br><span class="line">  raise TypeError, <span class="string">"Point addtion is not like a Point Duck Way"</span> <span class="keyword">unless</span> other.is_a? Point</span><br><span class="line"></span><br><span class="line">  Point.new(@x + other.x, @y + other.y)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>对于Point的实例变量我们可以使用<code>[]</code>方法来访问：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">[]</span><span class="params">(index)</span></span></span><br><span class="line">  <span class="keyword">case</span> index</span><br><span class="line">  <span class="keyword">when</span> <span class="number">0</span>, -<span class="number">2</span>: @x</span><br><span class="line">  <span class="keyword">when</span> <span class="number">1</span>, -<span class="number">1</span>: @y</span><br><span class="line">  <span class="keyword">when</span> <span class="symbol">:x</span>,<span class="string">"x"</span>: @x</span><br><span class="line">  <span class="keyword">when</span> <span class="symbol">:y</span>,<span class="string">"y"</span>: @y</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>对于Point类我们也可以定义<code>each</code>方法，来遍历实例变量。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">each</span></span></span><br><span class="line">  <span class="keyword">yield</span> @x</span><br><span class="line">  <span class="keyword">yield</span> @y</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>由于Point中的实例变量是有限的，我们只需要yield两次就可以了。调用的时候是需要<code>p.each {|x| puts x}</code>即可。</p><p>如果类实现了each方法，那么就可以混入Enumerable模块的一些方法，这些方法都是基于each定义的，<code>include Enumerable</code>。混入了Enumerable模块，可以写出以下的代码:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.all? &#123;<span class="params">|x|</span> x &gt; <span class="number">0</span>&#125; <span class="comment">#return true if all of the elements of Point larger than zero.</span></span><br></pre></td></tr></table></figure><p>在Java中，如果要判断两个实例是否&quot;相等&quot;需要覆写<code>equals</code>方法的。那么在Ruby中如何判断两个实例是否相等呢？我们可以定义<code>==</code>方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">==</span><span class="params">(other)</span></span></span><br><span class="line">  <span class="keyword">if</span> other.is_a? Point</span><br><span class="line">     @x == other.x <span class="keyword">and</span> @y == other.y</span><br><span class="line">  <span class="keyword">elsif</span></span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>在Ruby中<code>eql?</code>也可以用来比较对象是否相等，但是它不会自动进行类型的转换，而<code>==</code>是会对类型进行自动转换的。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="number">1</span> == (<span class="number">1.0</span>)  <span class="comment">#true FixNum will be converted to Float</span></span><br><span class="line">puts <span class="number">1</span>.eql?(<span class="number">1.0</span>)  <span class="comment">#false FixNum is not the same as Float</span></span><br></pre></td></tr></table></figure><p>如果想让两个操作在一个类中看起来是一样的，我们可以使用前面学到的<code>alias</code>来对方法进行重命名。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alias</span> eql? ==</span><br></pre></td></tr></table></figure><p>如果对Point有两种比较方式，一种不严格的坐标相等，一种严格的坐标相等。那么第一种就是<code>==</code>方法了。第二种我们可以定义 <code>eal?</code>方法来实现。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eql?</span><span class="params">(other)</span></span></span><br><span class="line">  <span class="keyword">if</span> other.instance_of? Point <span class="comment">#sub-class instance is not allowed</span></span><br><span class="line">     @x.eql?(other.x) <span class="keyword">and</span> @y.eql?(other.y)  <span class="comment">#type convert is not allowed</span></span><br><span class="line">  <span class="keyword">elsif</span></span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>对于Hash值的相等性判断</strong></p><p>Hash类的eql?使用主键进行比较，如果没有定义eql?方法，哈希表会用对象标志对对象进行比较，这意味着如果有一个哈希元素的主键是p，那么只能使用p来访问这个元素，而不能使用q,即使p==q。可变对象不适合做哈希表的主键，让eql?方法保持未定义可以绕过这个问题。</p><p>eql?方法用于Hash对象，不能单独定义它，类似于Java，它还需要定义如何计算它的hash值。有一个简单的方法来做到：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash</span></span></span><br><span class="line">  @x.hash + @y.hash</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>有一个比较通用的hash生成方法，适合于大部分的Ruby类:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash</span></span></span><br><span class="line">  code = <span class="number">17</span></span><br><span class="line">  code = <span class="number">37</span> * code + @x.hash</span><br><span class="line">  code = <span class="number">37</span> * code + @y.hash</span><br><span class="line">  <span class="comment">#the 17 and 37 is from the "Effective Java"</span></span><br><span class="line">  code</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>如何比较两个Point的大小呢？</strong></p><p>如果要比较两个对象的大小，一般要混入Comparable模块，实现<code>&lt;==&gt;</code>方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">&lt;=</span>=<span class="title">&gt;</span><span class="params">(other)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">unless</span> other.instance_of Point</span><br><span class="line">  @x ** <span class="number">2</span> + @y ** <span class="number">2</span> &lt;==&gt; other.x ** <span class="number">2</span> + other.y ** <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Comparable使用<code>&lt;==&gt;</code>来定义<code>==</code>方法，但是由于Point显式定义了<code>==</code>方法，所以Comparable中定义的<code>==</code>不会被调用到。</p><blockquote><p>Enumerable模块定义的若干方法，比如sort, min和max等包含比较的方法只有在被枚举的对象定义了<code>&lt;==&gt;</code>才能够正常工作。</p></blockquote><p>在定义一些可变方法的时候，如果会修改原来对象的值，一般对象方法后会有<code>!</code>来标志，如果不修改原有对象，一般会返回对象的一个副本。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add!</span><span class="params">(other)</span></span></span><br><span class="line">  @x += other.x</span><br><span class="line">  @y += other.y</span><br><span class="line">  <span class="keyword">self</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(other)</span></span></span><br><span class="line">  q = <span class="keyword">self</span>.dup</span><br><span class="line">  q.add!(other)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>可变类Mutable Class</strong></p><p>我们可以使用Struct类来定义可变的类，Struct类是Ruby的内核类，可以用于生成其它的类。在生成的类中定义的实例变量自动具有访问器方法。使用Struct来定义一个新类有两种方式:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Struct.new(<span class="string">"Point"</span>, <span class="symbol">:x</span>, <span class="symbol">:y</span>)</span><br><span class="line">Point = Struct.new(<span class="symbol">:x</span>, <span class="symbol">:y</span>)</span><br></pre></td></tr></table></figure><blockquote><p>在上面例子中，第二行代码使用了&quot;命名匿名类&quot;，如果把一个未命名的类对象赋值给一个变量的时候，这个变量名就自动称为该类的名称。上面的类就自动成为了&quot;Point&quot;</p></blockquote><p>使用Struct定义的新类会自动定义getter、setter、[]、[]=、each、each_pair、==、to_s方法。如果需要继续在Point类中添加新的方法，可以直接这样定义:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">my</span></span></span><br><span class="line">    puts <span class="string">"I am a add-handed method"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这不仅仅限于我们定义的新类，还包括任何其它的类。如果想要取消某些方法，可以使用前面学到的<code>undef</code>方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line">  <span class="keyword">undef</span> []=, x=, y=</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>BTW：所谓的可变与不变是指实例能否被外界的值所改变内部的实例变量。变与不变只是相对的，不变可以变为变的，变的可以变为不变的。</p><p><strong>类方法Class Method</strong></p><p>类方法就是传说中的单例方法，它可以单独调用，也可以使用对象.方法名来调用。定义它的方式有很多种：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line">  <span class="comment">#method one</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">Point</span>.<span class="title">sum</span><span class="params">(*points)</span></span></span><br><span class="line">    x, y = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    points.each &#123;<span class="params">|p|</span> x += p.x, y += p.y&#125;</span><br><span class="line">    Point.new(x, y)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#method two</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">sum</span><span class="params">(*points)</span></span></span><br><span class="line">    x, y = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    points.each &#123;<span class="params">|p|</span> x += p.x, y += p.y&#125;</span><br><span class="line">    Point.new(x, y)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#method three</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> &lt;&lt; self</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(*points)</span></span></span><br><span class="line">      x, y = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">      points.each &#123;<span class="params">|p|</span> x += p.x, y += p.y&#125;</span><br><span class="line">      Point.new(x, y)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#method four</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> &lt;&lt; Point</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(*points)</span></span></span><br><span class="line">    x, y = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    points.each &#123;<span class="params">|p|</span> x += p.x, y += p.y&#125;</span><br><span class="line">    Point.new(x, y)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>定义类常量</strong></p><p>常量一般都是使用全大写的单词，常量既可以从类中定义，也可以在类外自己动态添加(oh my god, it is so powerful weapon！)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Point</span></span></span><br><span class="line">  ORIGINAL_POINT = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Point::DYNAMIC = [<span class="number">100</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>要访问这些常量一般要加类的限定词，而在类内部对此没有任何要求。</p><p><strong>类变量 Class Variables</strong></p><p>类变量在不同实例之间共享，使用<code>@@</code>开头，只在内部可以引用，但是在外部是无法访问到的。类变量可以在类方法中可以被访问，类实例变量却是不可以的。</p><p><strong>类实例变量</strong></p><p>类实例变量是在类方法外定义的变量，但是这些变量是不能被实例方法所访问。不过类实例变量可能会让我们与普通的实例变量所混淆。类实例变量的优于类常量的一个重要特性是在继承现有类时，类实例变量的行为不像类变量那样让人混淆。</p><p>下面是分别用类变量和类实例变量写的用于统计Point的代码；</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#class variable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line">  @@n = <span class="number">0</span> </span><br><span class="line">  @@totalX = <span class="number">0</span></span><br><span class="line">  @@totalY = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(x,y)</span></span></span><br><span class="line">    @x,@y = x,y</span><br><span class="line"></span><br><span class="line">    @@n += <span class="number">1</span></span><br><span class="line">    @@totalX += x</span><br><span class="line">    @@totalY += y</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">report</span></span></span><br><span class="line">    puts <span class="string">"Number of points created: #@@n"</span></span><br><span class="line">    puts <span class="string">"Average X coordinate: <span class="subst">#&#123;@@totalX.to_f / @@n&#125;</span>"</span></span><br><span class="line">    puts <span class="string">"Average Y coordinate: <span class="subst">#&#123;@@totalY.to_f / @@n&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#class instance variable </span></span><br><span class="line"><span class="comment">#Because the class instance variable can't be used in the instance method, so define it in the class method</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line">  @n = <span class="number">0</span> </span><br><span class="line">  @totalX = <span class="number">0</span></span><br><span class="line">  @totalY = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(x,y)</span></span></span><br><span class="line">    @x,@y = x,y</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">new</span><span class="params">(x,y)</span></span></span><br><span class="line">    @n += <span class="number">1</span></span><br><span class="line">    @totalX += x</span><br><span class="line">    @totalY += y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">report</span></span></span><br><span class="line">    puts <span class="string">"Number of points created: #@@n"</span></span><br><span class="line">    puts <span class="string">"Average X coordinate: <span class="subst">#&#123;@@totalX.to_f / @@n&#125;</span>"</span></span><br><span class="line">    puts <span class="string">"Average Y coordinate: <span class="subst">#&#123;@@totalY.to_f / @@n&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>因为类实例变量是类对象的实例变量，我们可以使用attr_reader和attr_accessor为它们创建访问器方法。我们可以这样做:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> &lt;&lt; self</span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:n</span>, <span class="symbol">:totalX</span>, <span class="symbol">:totalY</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="方法的可见性"><a href="#方法的可见性" class="headerlink" title="方法的可见性"></a>方法的可见性</h2><p>Ruby像其它大部分面向对象一样使用public、private和protected来分别表示公开、私有和受保护的。</p><p>在ruby中定义的方法默认为public的，但是initialize方法不是，它是私有的。在类外定义的全局方法也是被定义为类的私有方法。</p><p>标准的定义类的顺序是这样的；</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line">  <span class="comment">#public methods</span></span><br><span class="line">  <span class="comment">#...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#protected methods</span></span><br><span class="line">  protected</span><br><span class="line"></span><br><span class="line">  <span class="comment">#private methods</span></span><br><span class="line">  private</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>除了常量外，Ruby的变量自动都是私有的，所以我们不能在外面直接访问它，除非有定义访问器方法设定的变量。</p><p>也可以在定义了方法后，在类的半部分同义定义某些方法的访问性: <code>private :x, :y</code></p><p>如果想要定义工厂类，那么我们一般不让直接使用<code>类.new</code>来获取新实例的，所以需要定义new的可访问性，但是由于new是类方法，所以这里需要特殊处理下，即使用<code>private_class_method</code>方法。当然如果想要将某个方法变为public的，那么可以使用<code>public_class_method</code>方法。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>类在继承的时候不会继承父类的实例变量，这些变量是在方法调用的时候自动生成的，这一点与Java等语言是不一样的。</p><p>##对象创建和初始化</p><p>Ruby一个new方法<strong>看起来</strong>像这样的:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(*args)</span></span></span><br><span class="line">  o = <span class="keyword">self</span>.allocate <span class="comment">#创建类的新对象</span></span><br><span class="line">  o.initialize(*args) <span class="comment">#调用对象的初始化方法，使用传入的参数进行初始化</span></span><br><span class="line">  o  <span class="comment">#返回对象</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>allocate是Class类的实例方法，被所有的类所继承，它的作用是创建类的一个实例。此方法不能被覆盖，因为Ruby只会调用它的原始版本，所以不会被真的覆盖掉。</p><p>initialize方法是一个实例方法，它的作用是为类的实例变量作初始化并赋初值。由于它是一个私有方法，所以我们不能显式地调用它。</p><blockquote><p>Class类定义了两个名为new的方法，一个是Class#new，它是一个实例方法，另外一个是Class::new，它是一个类方法。Class#new用于创建一个类的新对象，而CLass::new用于创建一个新类。</p></blockquote><p>###创建一个工厂方法</p><p>创建工厂方法方法必须不能让外界直接使用new方法，如何做到呢？这就用到了我们上面提到的方法可见性控制的内容了。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(x,y)</span></span></span><br><span class="line">    @x,@y = x,y</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  private_class_method <span class="symbol">:new</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">Point</span>.<span class="title">cartes</span><span class="params">(x,y)</span></span></span><br><span class="line">    new(x,y)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">Point</span>.<span class="title">polar</span><span class="params">(r, theta)</span></span></span><br><span class="line">    new(r * Math.cos(theta), r * Math.sin(theta))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="dup、clone和initialize-copy"><a href="#dup、clone和initialize-copy" class="headerlink" title="dup、clone和initialize_copy"></a>dup、clone和initialize_copy</h3><p>使用dup和clone方法也可以返回一个新对象，它分配一个调用者所属类的实例，然后把调用者的所有实例变量和修改都拷贝到新创建的对象中。clone方法比dup方法拷贝的更彻底，包括对象的单例方法和冻结状态。</p><p>如果类定义了一个名为initialize_copy的方法，那么clone和dup方法在拷贝完实例变量后，会执行这个方法，这个方法也是私有方法。</p><p>clone和dup方法把实例变量从原始对象拷贝到拷贝对象中时，它们拷贝的是引用而非实际值。也就是说，它们用的是浅拷贝，在修改拷贝对象时，它会修改被拷贝对象的值，所以一般我们在定义一个类时都要定制这两个方法的原因。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Point</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:x</span>,<span class="symbol">:y</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(x,y)</span></span></span><br><span class="line">    @x,@y = x,y</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Test</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:p</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(p)</span></span></span><br><span class="line">    @p = p</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p = Point.new(<span class="number">0</span>,<span class="number">0</span>)  <span class="comment">#x=0,y=0</span></span><br><span class="line">t = Test.new(p)   <span class="comment">#t.p.x=0, t.p.y=0</span></span><br><span class="line">t1 = t.clone</span><br><span class="line">t2 = t.dup   <span class="comment">#the same as the above</span></span><br><span class="line"></span><br><span class="line">t1.p.x = <span class="number">1</span> <span class="comment">#p.x=1, t.p.x=1, t2.p.x=1</span></span><br><span class="line"></span><br><span class="line">t2.p.y = <span class="number">4</span> <span class="comment">#p.y = 4, t.p.y=4, t1.p.y=4</span></span><br><span class="line"></span><br><span class="line">t1.p = <span class="literal">nil</span> <span class="comment">#t.p = p</span></span><br><span class="line">t2.p = <span class="literal">nil</span> <span class="comment">#it have no affect on t</span></span><br></pre></td></tr></table></figure><p>为了防止拷贝对象，我们可以使用<code>def</code>；来删除clone和dup方法，也可以将之定义为私有的方法，暴扣new,allocate。</p><h3 id="marshal-dump和marshal-load"><a href="#marshal-dump和marshal-load" class="headerlink" title="marshal_dump和marshal_load"></a>marshal_dump和marshal_load</h3><p>创建对象的第三种方式是调用Marshal.load方法来重新生成前面使用Marshal.dump序列化的对象。Marshal.dump方法保存一个对象的类，并递归序列化其中每个实例变量的值。绝大多数对象都可以使用这两个方法进行存储和序列化。</p><p>那么什么是序列化呢？序列化是我们将对象的一些状态保存成其它形式，或变量或文件，在需要重新恢复它的状态时，我们可以从序列化的结果进行反向操作，将对象的状态恢复过来。</p><p>有些类要修改实现序列化的方式，这样做的原因是为对象状态提供更加紧凑的方式，不去序列化那些缓存易变的数据。修改的方法就是重新定义marshal_dump来定制序列化方式，以及marshal_load来定制反序列化的方式。marshal_load方法被一个使用allocate方法新分配但是未初始化的的对象所调用，它需要一个由marshal_dump返回的可再生的对象拷贝作为参数，然后根据参数对象的状态初始化接收者对象。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>  </span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(*coords)</span></span></span><br><span class="line">    @coords = coords  </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">marshal_dump</span></span></span><br><span class="line">    @coords.pack(<span class="string">'w*'</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">marshal_load</span><span class="params">(s)</span></span></span><br><span class="line">    @coords = s.unpack(<span class="string">'w*'</span>)</span><br><span class="line">  <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p = Point.new(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">s = p.marshal_dump</span><br><span class="line">t = Point.allocate</span><br><span class="line">t.marshal_load(s) <span class="comment">#t will be the same instance variables as the instance of p</span></span><br></pre></td></tr></table></figure><p>下面的例子展示了如何将对象序列化到文件，并从文件反序列化对象的实例。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logfile</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(filename)</span></span></span><br><span class="line">    @filename = filename</span><br><span class="line">    @io = File.open(@filename,<span class="string">'w'</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">marshal_dump</span></span></span><br><span class="line">    log <span class="string">"Begin marshal..."</span></span><br><span class="line">    @filename  <span class="comment">#just dump the filename, and leave the io object alone</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">marshal_load</span><span class="params">(filename)</span></span></span><br><span class="line">    @filename = filename</span><br><span class="line">    @io = File.open(@filename, <span class="string">'a'</span>)</span><br><span class="line">    <span class="string">``</span>log <span class="string">"Begin ummarshal..."</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(msg)</span></span></span><br><span class="line">    @io.puts <span class="string">"<span class="subst">#&#123;Time.now&#125;</span>: <span class="subst">#&#123;msg&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">logfile = <span class="keyword">if</span> File.exists?(<span class="string">'logfile'</span>)</span><br><span class="line">            File.open(<span class="string">'logfile'</span>) <span class="keyword">do</span> <span class="params">|file|</span></span><br><span class="line">              Marshal.load(file)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            Logfile.new(<span class="string">'log.txt'</span>)</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ARGV.each <span class="keyword">do</span> <span class="params">|msg|</span></span><br><span class="line">  logfile.log msg</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">File.open(<span class="string">'logfile'</span>, <span class="string">'w'</span>) <span class="keyword">do</span> <span class="params">|file|</span></span><br><span class="line">  Marshal.dump(logfile, file)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>如果对一个类禁用了clone和dup方法，我们可能需要定制序列化方法，通过序列化和反序列化可以很容易实现对象的拷贝，我们就不可以不使用marshal_dump和marshal_load方法，让Marshal.load方法返回对象</p><h2 id="单例类"><a href="#单例类" class="headerlink" title="单例类"></a>单例类</h2><p>如果需要设定某个类是单例的，可以将new设置为私有，并且要阻止dup和clone方法不返回新的拷贝。也可以包含<code>singleton</code>模块，并在类中include Singleton就可以。这样会定义一个名为instance的方法来返回该类的一个实例。不过需要注意的是，这样定义的类是不能使用带参数的initialize方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">"singleton"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PointStats</span>  </span></span><br><span class="line">  <span class="keyword">include</span> Singleton</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">    @n, @totalX, @totalY = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">record</span><span class="params">(point)</span></span></span><br><span class="line">    @n +=<span class="number">1</span> </span><br><span class="line">    @totalX += point.x</span><br><span class="line">    @totalY += point.y</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">report</span></span></span><br><span class="line">    puts <span class="string">"Number of points are: #@n"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>在Point类中可以这样定义initialize方法:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(x,y)</span></span></span><br><span class="line">  @x,@y = x,y</span><br><span class="line">  PointStats.instance.record(<span class="keyword">self</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>想要获取返回的值，可以这样做:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PointStats.instance.report</span><br></pre></td></tr></table></figure><h1 id="模块Modules"><a href="#模块Modules" class="headerlink" title="模块Modules"></a>模块Modules</h1><p>模块与类是很相似的，是方法、常量和变量的命名组，它使用关键字<code>module</code>。与类不同的地方是模块不能被实例化，也不能被继承，只能作为命名空间和混入(Mixin)使用。</p><h2 id="模块用于命名空间"><a href="#模块用于命名空间" class="headerlink" title="模块用于命名空间"></a>模块用于命名空间</h2><p>一个模块内部是可以相互嵌套的，这样会产生嵌套的命名空间。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span>  <span class="title">Base64</span></span></span><br><span class="line">  DIGITS = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Encoder</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encoder</span></span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Decode</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decoder</span></span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">Base</span>.<span class="title">help</span> <span class="comment">#or self.help</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>在外部使用常量需要Base64::DIGITS，使用某个方法可以使用Base64.help, encoder = Base64::Encoder.new</p><p>##Module用于混入</p><p>模块的第二个作用是用于混入，Enumerable和Comparable是两个比较常见的模块，前者在混入的类中，如果定义了each方法，那么这个类就会有很多强大的迭代器,如each_with_index,each_with_object。如果Comparable模块被混入，且类定义了<code>&lt;==&gt;</code>方法，那么这个类的&gt;、&lt;、=方法就会自动拥有。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line">  <span class="keyword">include</span> Comparable</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>上面的include看起来是一个关键字，但实际上它是Module类的一个私有方法,隐式地被self调用。<code>self.include(Comparable)</code>。但是在代码中这样书写是错误的，它必须以函数的形式被调用。include方法可以接受多个Module对象进行混入，所以如果一个类定义了each和&lt;==&gt;方法的类可以加入<code>include Enumerable, Comparable</code>。</p><p>虽然class也是模块，但是类不允许include在另一个类中，include的参数必须是以module进行声明的模块。但是将模块包含在另一个模块中是合法的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module Iterable</span><br><span class="line">  include Enumerable</span><br><span class="line"></span><br><span class="line">  def each</span><br><span class="line">    loop &#123; yield self.next &#125;</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>混入一个模块的方式除了使用include外，还可以使用Object.extend方法，它可以将指定模块的实例方法变成接收对象的单键方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">countdown = Object.new</span><br><span class="line">def countdown.each</span><br><span class="line">  yield 1</span><br><span class="line">  yield 3</span><br><span class="line">  yield 2</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">countdown.extend(Enumerable) #now the each method becomes a singleton method of Object and have the mothods in Enumerable</span><br><span class="line">print countdown.sort</span><br></pre></td></tr></table></figure><h2 id="可包含的命名空间模块"><a href="#可包含的命名空间模块" class="headerlink" title="可包含的命名空间模块"></a>可包含的命名空间模块</h2><p>前面我们定义的module中的方法都是以混入类的实例方法来调用的，我们可以将混入的方法以类的私有方法来进行调用。在就爱那个方法定义为了实例方法之后，使用<code>module_function</code>将这些方法定义为“模块函数”。module_function与public、private等类似，它的主要作用是对给定方法创建类方法的拷贝和将实例方法变为私有的。module_function可以不跟参数，类似与private、public这样的效果，所以如果不想让某些方法成为非模块函数时需要将它定义在module_function的前面。</p><p>使用module_function不是出于访问控制的需要，真实目的是让这些方法必须用无接受者的函数风格的调用方式。强制被包含模块的方法以无接收者的方式调用，减少了与真正的实例方法混淆的可能。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">My</span> </span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test</span></span></span><br><span class="line">    puts <span class="string">"hello world"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  module_function <span class="symbol">:test</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">my</span></span></span><br><span class="line">    test</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p = Point.new</span><br><span class="line">p.test <span class="comment">#Wrong</span></span><br><span class="line">p.my <span class="comment">#hello world</span></span><br><span class="line">My.test <span class="comment">#hello world</span></span><br></pre></td></tr></table></figure><h2 id="加载和请求模块"><a href="#加载和请求模块" class="headerlink" title="加载和请求模块"></a>加载和请求模块</h2><p>Ruby程序被分散在多个文件的时候，我们需要将它们“组装”起来，组装的方法就是<code>require</code>和 <code>load</code>。require和load的作用类似，但是require更加常用，require还可以用于从标准库中加载文件。require还可以加载二进制扩展，如so和dll。load方法要求加载的为包含文件扩展名的完整文件名称，而require只需要传入文件的名字，而不需要后缀。如果一个目录下同时拥有同名的不同后缀的文件，那么require优先加载文件格式的文件，而不是二进制文件。load方法会加载一个路径多次，而require由于会将文件路径展开，所以不会重复，且它把已经加载过的文件名方在全局数组<code>$&quot;</code>中。</p><p>Ruby的加载路径可以使用<code>$LOAD_PATH</code>或<code>$:</code>来获取。越是靠前的路径优先被搜索。在ruby 1.9中，load_path数组的元素可以是字符串，也可以是任何实现了<code>to_path</code>的类对象。</p><h2 id="执行加载的代码"><a href="#执行加载的代码" class="headerlink" title="执行加载的代码"></a>执行加载的代码</h2><p>load和require会立刻执行制定文件的代码，但是这种执行方式与直接调用文件中的代码并不是等价的。</p><p>用load和require加载的文件在顶级范围中被执行，而不是在load或require被调用的层级中执行。被夹在的文件可以访问那些加载时已定义的所有全局变量和常量，但是实例变量是不能在文件外被访问到。另外self的值永远是主对象，load和require不会把接收者对象传递给所加载的文件。</p><p>load方法在调用时，如果第二个参数值不是nil或false，它会wrap给定的文件到一个匿名模块中，这意味着加载的文件不会影响全局命名空间，它命名的所有常量被放入到这个匿名模块中。这种包裹加载方式作为一种安全措施而存在。</p><p>当一个文件被加载到匿名模块中，它亦然可以设置全局变量，而且这些变量也可被加载的代码所使用。</p><h2 id="autoloading-Modules"><a href="#autoloading-Modules" class="headerlink" title="autoloading Modules"></a>autoloading Modules</h2><p>Kernel和Module的autoload方法支持按需惰性加载的机制，它允许使用一个未定义的常量和定义了该常量的包名。在这个常量在第一次被引用的时候，那个注册的包就使用require进行加载。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auload <span class="symbol">:TCPSocket</span>, <span class="string">"socket"</span></span><br></pre></td></tr></table></figure><p>使用autoload?或Module.autoload?方法可以测试一个常量是否加载一个文件，它们带有一个符号参数。如果这个符号参数加载了一个文件，autoload?方法返回文件名，否则返回nil。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Class&quot;&gt;&lt;a href=&quot;#Class&quot; class=&quot;headerlink&quot; title=&quot;Class&quot;&gt;&lt;/a&gt;Class&lt;/h1&gt;&lt;p&gt;一个类的实例可以使用&lt;code&gt;类名.new&lt;/code&gt;来初始化，&lt;code&gt;new&lt;/code&gt;方法会自动调用该类的&lt;code&gt;initialize&lt;/code&gt;方法，但是由于&lt;code&gt;initialize&lt;/code&gt;方法是类的私有方法，所以不能显式的调用它。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Point&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt;  &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x, y)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @x = x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @y = y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = Point.new(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的实例&lt;code&gt;p&lt;/code&gt;并不能直接访问里面的实例变量@x,@y，因为Ruby是面向对象的语言，所以访问这些实例变量实际上是访问与实例变量的方法而已。如果直接使用&lt;code&gt;p.x&lt;/code&gt;，Ruby会告诉你:&amp;quot;NoMethodError: undefined method `x` for #&amp;lt;Point:0x007fc7c40b1ee8 @x=2, @y=4&amp;gt;&amp;quot;。为了能够访问里面的实例变量，我们可以定义对应的访问方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Tech" scheme="https://polarlights.github.io/categories/Tech/"/>
    
      <category term="Ruby" scheme="https://polarlights.github.io/categories/Tech/Ruby/"/>
    
    
      <category term="Ruby" scheme="https://polarlights.github.io/tags/Ruby/"/>
    
      <category term="Module" scheme="https://polarlights.github.io/tags/Module/"/>
    
      <category term="Class" scheme="https://polarlights.github.io/tags/Class/"/>
    
  </entry>
  
  <entry>
    <title>How Minitest Works Part 2</title>
    <link href="https://polarlights.github.io/2016/02/21/how_minitest_works_part_2/"/>
    <id>https://polarlights.github.io/2016/02/21/how_minitest_works_part_2/</id>
    <published>2016-02-21T02:40:42.000Z</published>
    <updated>2019-08-11T09:30:13.726Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注：本文以 minitest 的最新master 分支 <a href="https://github.com/seattlerb/minitest/tree/baf6010053279f75f561f6a599d8837151327588" target="_blank" rel="noopener">baf6010</a> ，版本为<code>5.8.4</code>为基础。<br>所有代码可以在<a href="https://github.com/minitest_source" target="_blank" rel="noopener">minitest_source</a> 找到.</p></blockquote><p>在上一节我们留下了以下几个问题，本节我们透过对Minitest源码的分析来一探究竟:</p><ul><li><code>minitest/autorun</code> 到底做了什么？</li><li>继承<code>Minitest::Test</code>的目的何在，它内部有什么特殊方法？</li><li>为什么以<code>test_</code> 开头的方法执行了，而普通的方法没有执行？里面肯定有一个&quot;惊天的阴谋&quot;</li><li>Minitest 的结果是何时，如何打出来的？</li><li>Minitest有哪些钩子，调用顺序几何？</li></ul><a id="more"></a><p>我们首先看<code>minitest/autorun</code>文件，里面只有简单几行：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">require</span> <span class="string">"rubygems"</span></span><br><span class="line">  gem <span class="string">"minitest"</span></span><br><span class="line"><span class="keyword">rescue</span> Gem::LoadError</span><br><span class="line">  <span class="comment"># do nothing</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">"minitest"</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">"minitest/spec"</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">"minitest/mock"</span></span><br><span class="line"></span><br><span class="line">Minitest.autorun</span><br></pre></td></tr></table></figure><h2 id="Minitest-autorun"><a href="#Minitest-autorun" class="headerlink" title="Minitest.autorun"></a>Minitest.autorun</h2><p>它做了什么事情呢？加载 minitest 相关文件，最后调用<code>Minitest.autorun</code>方法，即Minitest的module方法<code>autorun</code>。<br>让我们继续顺藤摸瓜。它在哪里定义的呢？在 <a href="https://github.com/seattlerb/minitest/blob/baf6010053279f75f561f6a599d8837151327588/lib/minitest.rb#L45" target="_blank" rel="noopener">minitest.rb#L45</a>:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">autorun</span></span></span><br><span class="line">  at_exit &#123;</span><br><span class="line">    <span class="keyword">next</span> <span class="keyword">if</span> $! <span class="keyword">and</span> <span class="keyword">not</span> ($!.kind_of? SystemExit <span class="keyword">and</span> $!.success?)</span><br><span class="line"></span><br><span class="line">    exit_code = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    at_exit &#123;</span><br><span class="line">      @@after_run.reverse_each(&amp;<span class="symbol">:call</span>)</span><br><span class="line">      exit exit_code <span class="params">||</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    exit_code = Minitest.run ARGV</span><br><span class="line">  &#125; <span class="keyword">unless</span> @@installed_at_exit</span><br><span class="line">  @@installed_at_exit = <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>它的主要作用是在程序进程结束前注入Minitest，并执行。</p><p>咦，<code>at_exit</code>是什么鬼？相信很多人很少见到它甚至是在阅读<code>Minitest</code>源码时第一次见到它。查询Ruby的文档，有下面这样的描述：</p><blockquote><p>Converts block to a Proc object (and therefore binds it at the point of call) and registers it for execution when the program exits. If multiple handlers are registered, they are executed in reverse order of registration.</p></blockquote><p>它将代码块转为<code>Proc</code>对象，在程序退出时call这个Proc对象；如果注册了多个<code>at_exit</code>代码块，它会逆序执行。</p><p>我们写一个测试代码:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># at_exit.rb</span></span><br><span class="line">puts <span class="string">"Into program."</span></span><br><span class="line"></span><br><span class="line">at_exit <span class="keyword">do</span></span><br><span class="line">  puts <span class="string">"I'm executed at the end. start..."</span></span><br><span class="line">  at_exit &#123; puts <span class="string">"I'm executed at last."</span> &#125;</span><br><span class="line">  puts <span class="string">"I'm executed at the end. end..."</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">at_exit &#123; puts <span class="string">"I'm executed after the 'Exit program'."</span> &#125;</span><br><span class="line"></span><br><span class="line">puts <span class="string">"Exit program."</span></span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby at_exit.rb</span><br><span class="line">Into program.</span><br><span class="line">Exit program.</span><br><span class="line">I<span class="string">'m executed after the '</span>Exit program<span class="string">'.</span></span><br><span class="line"><span class="string">I'</span>m executed at the end. start...</span><br><span class="line">I<span class="string">'m executed at the end. end...</span></span><br><span class="line"><span class="string">I'</span>m executed at last.</span><br></pre></td></tr></table></figure><p>通过上面测试代码的执行结果，我们知道，<code>Minitest.autorun</code>会先后调用<code>Minitest.run</code>和Module变量<code>@@after_run</code>里的Proc对象。</p><p>它们又分别做了什么呢？</p><h2 id="Minitest-run"><a href="#Minitest-run" class="headerlink" title="Minitest.run"></a>Minitest.run</h2><p><code>@@after_run</code>保存的是在所有test执行结束后执行的代码块, 我们可以调用通知程序将测试完成通知给其他程序 或者发送邮件等等。</p><p><code>Minitest.run</code>加载Minitest的插件；初始化reporter；执行测试，输出结果；最后返回test的执行结果给上面的<code>exit_code</code></p><h3 id="Minitest-load-plugins"><a href="#Minitest-load-plugins" class="headerlink" title="Minitest.load_plugins"></a>Minitest.load_plugins</h3><p>Minitest的插件都是以<code>_plugin.rb</code>结尾，放在<code>minitest</code>目录下。比如在Minitest中就有<code>pride_plugin.rb</code>，它就是Minitest默认的 插件。每个Minitest的插件都可以有(不是必须有)一个以该插件名命名的初始化方法<code>plugin_[插件名]_init</code>。 比如<code>pride_plugin.rb</code>的插件初始化方法为<code>plugin_pride_init</code>。Minitest的参数是用<code>optparse</code>解析的，它的插件也有一个支持<code>optparse</code>的方法: <code>plugin_pride_options</code>来做一些扩展。</p><h3 id="Reporter"><a href="#Reporter" class="headerlink" title="Reporter"></a>Reporter</h3><p>这期间还会初始化CompositeReporter、SummaryReporter和ProgressReporter 3 个reporter，并赋值给Minitest的reporter属性，它用来展示测试的结果；它只在<code>init_plugins</code>中可用，在初始化完plugin后就被置为空了。所以如果想要在测试结束后调用reporter相关的操作，可以自己编写plugin（后续文章我们会涉及）。</p><p>上面说了3中Reporter。那么这三者有什么区别和联系呢？</p><p>Reporter的继承结构是这样的:</p><pre><code>AbstractReporter|__Reporter|   |__ProgressReporter|   |__StatisticsReporter|      |__SummaryReporter|__CompositeReporter</code></pre><p>所有的Reporter都是<code>AbstractReporter</code>子类，<code>AbstractReporter</code>定义了作为一个reporter应该有的方法，它们是<code>start</code>(在启动后开始记录测试结果),<code>record</code>(输出测试的结果；如果测试没有通过，会记录单个测试的结果),<code>report</code>(输出测试的概况),<code>passed?</code>(测试是否通过)。</p><p><code>Reporter</code>默认将标准输出作为默认的输出。</p><p><code>ProgressReporter</code>是一个很简单的reporter，他将测试用<strong>点</strong>打出.</p><p><code>StatisticsReporter</code>收集单个测试的统计信息，并没有任何IO相关的操作。如果想定制输出类型（比如CI，HTML等等），可以通过修改这个类的一些方法来做到。该类因为是统计测试结果的，所以它里面包含了测试的数量、assert的数量、开始时间、总时间、失败的测试、报错的测试和跳过的测试数量。</p><p><code>SummaryReporter</code>是<code>StatisticsReporter</code>的子类，分别在测试开始时和测试结束的时候打印参数信息和标题、概况、失败的细节信息,类似：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># At the beginning</span></span><br><span class="line">Run options: --seed 13908</span><br><span class="line"></span><br><span class="line"><span class="comment"># Running:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># At the end</span></span><br><span class="line">Finished <span class="keyword">in</span> 0.003004s, 665.8359 runs/s, 665.8359 assertions/s.</span><br><span class="line"></span><br><span class="line">2 runs, 2 assertions, 0 failures, 0 errors, 1 skips</span><br><span class="line"></span><br><span class="line">You have skipped tests. Run with --verbose <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><p>最后一句只有test中有<code>skip</code>的结果才会输出。</p><p><code>CompositeReporter</code>可以调度多个repoter,将调用<code>passed?</code>、<code>start</code>、<code>record</code>、<code>report</code>的方法代理给所有的reporter。可以认为它是所有reporter的顶级代理类。</p><h2 id="Minitest-run-1"><a href="#Minitest-run-1" class="headerlink" title="Minitest.__run"></a>Minitest.__run</h2><p>在初始化完reporter和plugin后，开始跑测试。具体执行每个继承了<code>Mintest::Test</code>/<code>Minitest::Spec</code>/<code>Minitest::Benchmark</code>的子类。比如之前距离代码中的&#39;DogTest&#39;。</p><p>但是我们发现继承了<code>Minitest::Test</code>的子类只有以<code>test_</code>开头的方法执行了，魔法在哪里？我们继续往下看。</p><h2 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h2><p><code>Runnable</code>是什么鬼？它表示任何<code>runnable</code>的父类，任何它的子类都会自动注册到<code>Runnable.runnables</code>。为甚么它会<strong>自动</strong>注册呢？因为它有一个Ruby的钩子：<code>inherited</code>,它会在任何继承了该类的时候调用，让我们来看看它的代码：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">inherited</span> <span class="title">klass</span></span></span><br><span class="line">  <span class="keyword">self</span>.runnables &lt;&lt; klass</span><br><span class="line">  <span class="keyword">super</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Runnable的run方法</p><h3 id="runnable-run"><a href="#runnable-run" class="headerlink" title="runnable.run"></a>runnable.run</h3><p>它可以按照用户输入的<code>--name</code>参数只跑符合对应正则的方法。里面定义了一个<code>runnable_methods</code>，它里面就会只保留满足子类定义的正则（不是用户输入的）的方法来一个个执行。比如<code>Minitest::Test</code>是<code>Runnable</code>的子类，它要求可执行方法是以<code>test_</code>开头；同样的<code>Minitest::Benchmark</code>要求方法以<code>bench_</code>开头.</p><p>保留的测试方法，会逐个执行，调用<code>Minitest.run_one_method klass, method_name, reporter</code>。<br>它将调用Runnable的<code>initialize</code>方法，将<code>method_name</code>作为参数，作为要调用的方法名。</p><h3 id="runnable-new-run"><a href="#runnable-new-run" class="headerlink" title="runnable.new.run"></a>runnable.new.run</h3><p>以<code>Minitest::Test</code>为例，执行前它会先后调用<code>before_setup</code>、<code>setup</code>、<code>after_setup</code>几个钩子方法，然后调用上面作为参数传入的<code>method_name</code>。以实例代码为例，就是调用了<code>DogTest.new. test_dog_should_spark</code>，它里面就执行了具体的assert_方法，同样asert的数量就是在此时增加的。方法执行结束后，会调用<code>before_teardown</code>、<code>teardown</code>和<code>after_teardown</code>这几个钩子，你可以做一些你想在测试结束后想做的事情。</p><p>这里衍生出个问题：它是如何判断我是Skip还是报错的？</p><p>如果正常执行，它会根据<code>test_</code>方法实际的<code>assert_</code>方法的数量增加asserts属性的值。那么如果报错了呢？比如抛了一个异常，如何保证程序不终止，而是继续执行其他的方法呢？</p><p>答案是<code>rescue</code>，是的，对代码做保护,详见<code>lib/minitest/test.rb:L204</code>:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">capture_exceptions</span> <span class="comment"># :nodoc:</span></span></span><br><span class="line">  <span class="keyword">yield</span></span><br><span class="line"><span class="keyword">rescue</span> *PASSTHROUGH_EXCEPTIONS</span><br><span class="line">  raise</span><br><span class="line"><span class="keyword">rescue</span> Assertion =&gt; e</span><br><span class="line">  <span class="keyword">self</span>.failures &lt;&lt; e</span><br><span class="line"><span class="keyword">rescue</span> Exception =&gt; e</span><br><span class="line">  <span class="keyword">self</span>.failures &lt;&lt; UnexpectedError.new(e)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Asesrtion的继承关系如下图:</p><pre><code>Exception|__Assertion   |__Skip   |__UnexpectedError</code></pre><p>如果某个方法是被<code>skip</code>了，那么它会抛出Skip异常，由Assertion捕获；如果方法执行代码错误，则被Exception捕获，并用UnexceptedError包一下。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上的分析，我们现在可以把整个的调用层级重新整理下：</p><pre><code>Minitest.autorun  Minitest.run(args)    Minitest.__run(reporter, options)      Runnable.runnables.each        runnable.run(reporter, options)          self.runnable_methods.each            self.run_one_method(self, runnable_method, reporter)              Minitest.run_one_method(klass, runnable_method)                klass.new(runnable_method).run</code></pre><p>用我们案例代码，表示为:</p><pre><code>Minitest.autorun  Minitest.run(args)    Minitest.__run(reporter, options)      Runnable.runnables.each        DogTest.run(reporter, options)          [test_dog_should_spark].each            DogTest.run_one_method(DogTest, test_dog_should_spark, reporter)              Minitest.run_one_method(DogTest, test_dog_should_spark)                DogTest.new(test_dog_should_spark).run</code></pre><p>参考文献:</p><ul><li><a href="https://github.com/seattlerb/minitest" target="_blank" rel="noopener">Minitest github repository</a></li><li><a href="http://mednoter.com/minitest-part-I-autorun.html" target="_blank" rel="noopener">How minitest works</a></li><li><a href="http://chriskottom.com/minitestcookbook" target="_blank" rel="noopener">The Minitest Cookbook</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;注：本文以 minitest 的最新master 分支 &lt;a href=&quot;https://github.com/seattlerb/minitest/tree/baf6010053279f75f561f6a599d8837151327588&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;baf6010&lt;/a&gt; ，版本为&lt;code&gt;5.8.4&lt;/code&gt;为基础。&lt;br&gt;所有代码可以在&lt;a href=&quot;https://github.com/minitest_source&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;minitest_source&lt;/a&gt; 找到.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在上一节我们留下了以下几个问题，本节我们透过对Minitest源码的分析来一探究竟:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;minitest/autorun&lt;/code&gt; 到底做了什么？&lt;/li&gt;
&lt;li&gt;继承&lt;code&gt;Minitest::Test&lt;/code&gt;的目的何在，它内部有什么特殊方法？&lt;/li&gt;
&lt;li&gt;为什么以&lt;code&gt;test_&lt;/code&gt; 开头的方法执行了，而普通的方法没有执行？里面肯定有一个&amp;quot;惊天的阴谋&amp;quot;&lt;/li&gt;
&lt;li&gt;Minitest 的结果是何时，如何打出来的？&lt;/li&gt;
&lt;li&gt;Minitest有哪些钩子，调用顺序几何？&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Ruby" scheme="https://polarlights.github.io/categories/Ruby/"/>
    
      <category term="Test" scheme="https://polarlights.github.io/categories/Ruby/Test/"/>
    
    
      <category term="Test" scheme="https://polarlights.github.io/tags/Test/"/>
    
      <category term="Minitest" scheme="https://polarlights.github.io/tags/Minitest/"/>
    
  </entry>
  
  <entry>
    <title>How Minitest Works Part 1</title>
    <link href="https://polarlights.github.io/2016/02/20/how_minitest_works_part_1/"/>
    <id>https://polarlights.github.io/2016/02/20/how_minitest_works_part_1/</id>
    <published>2016-02-20T11:02:42.000Z</published>
    <updated>2019-08-11T09:30:13.726Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注：本文以 minitest 的最新master 分支 <a href="https://github.com/seattlerb/minitest/tree/baf6010053279f75f561f6a599d8837151327588" target="_blank" rel="noopener">baf6010</a> ，版本为<code>5.8.4</code>为基础。<br>所有代码可以在<a href="https://github.com/minitest_source" target="_blank" rel="noopener">minitest_source</a> 找到.</p></blockquote><h1 id="一个简单的测试"><a href="#一个简单的测试" class="headerlink" title="一个简单的测试"></a>一个简单的测试</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代码 1.1</span></span><br><span class="line"><span class="comment"># dog.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">spark</span></span></span><br><span class="line">    <span class="string">'Spark!'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dog_test.rb</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line">require_relative <span class="string">'./dog'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @dog = Dog.new</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_dog_should_spark</span></span></span><br><span class="line">    assert_respond_to @dog, <span class="symbol">:spark</span></span><br><span class="line">    assert_equal <span class="string">'Spark!'</span>, @dog.spark</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">ordiary_method</span></span></span><br><span class="line">    assert <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>如何执行测试呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ruby dog_test.rb</span><br><span class="line">Run options: --seed 24057</span><br><span class="line"></span><br><span class="line"><span class="comment"># Running:</span></span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.001039s, 962.5723 runs/s, 1925.1446 assertions/s.</span><br><span class="line"></span><br><span class="line">1 runs, 2 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>如果我们把<code>require &#39;minitest/autorun&#39;</code> 这一行注释掉，然后再执行<code>ruby dog_test.rb</code>，程序是否还<br>正常执行呢？让我们执行下：</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ruby dog_test.rb</span><br></pre></td></tr></table></figure><p> 这一次什么都没有输出。Why? 这一行有什么魔法呢？为什么有了它之后，可以执行测试代码，<br> 还可以输出测试结果？</p><p> 那我们看一下<code>Minitest</code> 的代码，就可以了然了。</p><p>如果列位有兴趣，可以继续往下看。</p><h1 id="Minitest-的工作原理"><a href="#Minitest-的工作原理" class="headerlink" title="Minitest  的工作原理"></a>Minitest  的工作原理</h1><h2 id="Minitest-主要代码的结构"><a href="#Minitest-主要代码的结构" class="headerlink" title="Minitest 主要代码的结构"></a>Minitest 主要代码的结构</h2><pre><code>minitest│   ├── assertions.rb   # 定义 assert_*方法│   ├── autorun.rb      # 自动执行测试│   ├── benchmark.rb    # Benchmark 相关方法│   ├── expectations.rb # 使用`must` 代替`assert`│   ├── hell.rb         # 并行执行测试│   ├── mock.rb         # Mock 的 expect 相关实现│   ├── parallel.rb     # 多线程执行测试│   ├── pride.rb        # Report 的一种，以颜色展示结果│   ├── pride_plugin.rb # Pride plugin 的具体实现│   ├── spec.rb         # spec 实现，本质上是一种语法糖│   ├── test.rb         # Minitest 具体执行部分│   └── unit.rb         # test/unit 的 Minitest 实现└── minitest.rb         # Minitest 的抽象层实现</code></pre><p>Minitest 的代码行数统计数据:</p><pre><code>-------------------------------------------------------------------------------Language                     files          blank        comment           code-------------------------------------------------------------------------------Ruby                            13            646           1061           1593-------------------------------------------------------------------------------SUM:                            13            646           1061           1593-------------------------------------------------------------------------------</code></pre><blockquote><p>以上是使用<a href="http://cloc.sourceforge.net/" target="_blank" rel="noopener">cloc</a> 统计得出。</p></blockquote><p>Minitest 用了不到1600行的代码，集扩展性强、兼容性好、可读性强于一身。</p><p>从上面的代码，我们可以得到以下结论：</p><ul><li>测试文件需要加载<code>minitest/autorun</code> 文件</li><li>测试类要继承自<code>Minitest::Test</code> 或者其子类</li><li>测试方法需要以<code>test_</code> 开头。(可以看到上面只有2个 assert 执行了，里面其实有3个 assert 语句)</li><li>测试结束会输出执行的结果（是否通过、失败、跳过以及执行时间和速度）</li><li>Minitest 有钩子的存在(比如setup)</li></ul><p>那么我们会有以下疑问：</p><ul><li><code>minitest/autorun</code> 到底做了什么？</li><li>继承<code>Minitest::Test</code>的目的何在，它内部有什么特殊方法？</li><li>为什么以<code>test_</code> 开头的方法执行了，而普通的方法没有执行？里面肯定有一个&quot;惊天的阴谋&quot;</li><li>Minitest 的结果是何时，如何打出来的？</li><li>Minitest有哪些钩子，调用顺序几何？</li></ul><p>以上问题，我们在下一节讨论。</p><p>参考文献:</p><ul><li><a href="https://github.com/seattlerb/minitest" target="_blank" rel="noopener">Minitest github repository</a></li><li><a href="http://mednoter.com/minitest-part-I-autorun.html" target="_blank" rel="noopener">How minitest works</a></li><li><a href="http://chriskottom.com/minitestcookbook" target="_blank" rel="noopener">The Minitest Cookbook</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;注：本文以 minitest 的最新master 分支 &lt;a href=&quot;https://github.com/seattlerb/minitest/tree/baf6010053279f75f561f6a599d8837151327588&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;baf6010&lt;/a&gt; ，版本为&lt;code&gt;5.8.4&lt;/code&gt;为基础。&lt;br&gt;所有代码可以在&lt;a href=&quot;https://github.com/minitest_source&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;minitest_source&lt;/a&gt; 找到.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一个简单的测试&quot;&gt;&lt;a href=&quot;#一个简单的测试&quot; class=&quot;headerlink&quot; title=&quot;一个简单的测试&quot;&gt;&lt;/a&gt;一个简单的测试&lt;/h1&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 代码 1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# dog.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dog&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;spark&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;Spark!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# dog_test.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;minitest/autorun&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;require_relative &lt;span class=&quot;string&quot;&gt;&#39;./dog&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DogTest&lt;/span&gt; &amp;lt; Minitest::Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setup&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @dog = Dog.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test_dog_should_spark&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assert_respond_to @dog, &lt;span class=&quot;symbol&quot;&gt;:spark&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assert_equal &lt;span class=&quot;string&quot;&gt;&#39;Spark!&#39;&lt;/span&gt;, @dog.spark&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ordiary_method&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assert &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如何执行测试呢？&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ruby dog_test.rb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Run options: --seed 24057&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Running:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Finished &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 0.001039s, 962.5723 runs/s, 1925.1446 assertions/s.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 runs, 2 assertions, 0 failures, 0 errors, 0 skips&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们把&lt;code&gt;require &amp;#39;minitest/autorun&amp;#39;&lt;/code&gt; 这一行注释掉，然后再执行&lt;code&gt;ruby dog_test.rb&lt;/code&gt;，程序是否还&lt;br&gt;正常执行呢？让我们执行下：&lt;/p&gt;
    
    </summary>
    
      <category term="Ruby" scheme="https://polarlights.github.io/categories/Ruby/"/>
    
      <category term="Test" scheme="https://polarlights.github.io/categories/Ruby/Test/"/>
    
    
      <category term="Test" scheme="https://polarlights.github.io/tags/Test/"/>
    
      <category term="Minitest" scheme="https://polarlights.github.io/tags/Minitest/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to Minitest</title>
    <link href="https://polarlights.github.io/2016/02/19/introduction_to_minitest/"/>
    <id>https://polarlights.github.io/2016/02/19/introduction_to_minitest/</id>
    <published>2016-02-19T11:19:33.000Z</published>
    <updated>2019-08-11T09:30:13.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>之前几乎不写测试，嗯，我属于那一类人。很多时候是自己先写一个功能，然后输入一些简单案例跑一跑，如果过了，那么就……过了，可以<code>放心</code>继续下面的工作了。直到维护一个个前辈们的项目，而且功能不断添加，添加。问题接着出现了：按下葫芦浮起瓢，改了一个 Bug，引出了其它的 Bug。代码在修改过程中，越来越心里没底。更别说重构了。。。。</p><h2 id="为什么要写测试？"><a href="#为什么要写测试？" class="headerlink" title="为什么要写测试？"></a>为什么要写测试？</h2><p>现在的 Coder 应该都有这样的共识：写测试总比不写要好。为什么呢？因为它可以给我们带来以下好处：</p><ul><li>便于整理编码思路</li></ul><p>我们写代码，实际上使用计算机的语言来解决我们现实中的问题，方便我们的生活和工作。事实上，很不幸，现实比书本上描述地复杂得多。不是每个人都可以很快在头脑里对现实问题迅速抽象出来而且恰到好处的。</p><p>在写具体写代码之前，如果先按接口写测试，可以保证接口的稳定性（设计好接口，也可以方便其它人并行开发），还可以发现设计的一些缺陷（比如设计不合理、复杂度高）。</p><p>思路清晰了，那么我们代码的结构也会清晰。不仅自己看着舒服，别人维护也容易。</p><a id="more"></a><ul><li>减少隐藏的 Bug，提高代码质量</li></ul><p>其实这个本质上是一个覆盖率的问题。如果测试案例覆盖了几乎所有的情况（即使这个做到是有些难度的），在开发时期，很多 Bug 就会被早早地发现了。总比被别人报告 Bug 要好很多。</p><ul><li>减少重复机械操作</li></ul><p>在开发一个功能时，如果功能是非常简单的，类似输入abc，输出 ABC 这样大小写转换的操作，写完功能之后，简单测试下还可以。如果某个功能写好后，需要一系列的输入和操作，重复起来，那就是一个灾难。</p><ul><li>方便重构</li></ul><p>在看项目中别人写的代码的时候，有时会不自主的叹气：写得什么破代码；在看大牛的代码的时候，会惊叹：写得这么如此巧妙！妙哉！妙哉！不管代码写得如何，很多已经经历过很多次的迭代、重构。好的东西总是建立在巨人的肩膀上的。</p><p>重构时，如果面对的是没有任何测试案例的代码，我们肯定在重构的过程中会战战兢兢，唯恐踩到某个雷，甚至会不知何时给自己埋下一个雷。地雷，有一天会爆的。</p><ul><li>增加对项目的理解</li></ul><p>测试需要开发对业务逻辑有相当的理解。代码建立在你对要实现什么的基础上，其次是如何实现。整个数据的流程在伴随着测试案例的增加过程中，对系统的 来龙去脉也会更加熟悉。<br>所谓专家，不止是技术上的牛，在业务上也是牛。如何成为大牛？千里之行始于足下。</p><img src="/2016/02/19/introduction_to_minitest/throne_game.jpg" class="权力的游戏"><p><strong><center>兰尼斯特有债必还</center></strong></p><h2 id="写测试是必要的吗？"><a href="#写测试是必要的吗？" class="headerlink" title="写测试是必要的吗？"></a>写测试是必要的吗？</h2><p>如果某个项目只有个人开发，这个项目只是个一锤子买卖或者功能十分简单，可以不写测试。现实中的项目很多都是多人合作才能完成的，曾经工作的公司一个完整的开发流程是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">design=&gt;start: 概要设计/详细设计</span><br><span class="line">deliver=&gt;end: 交付</span><br><span class="line">dev=&gt;operation: 开发</span><br><span class="line">test=&gt;operation: 测试</span><br><span class="line">integrate=&gt;operation: 集成</span><br><span class="line">deploy=&gt;operation： 上线</span><br><span class="line"></span><br><span class="line">degign-&gt;dev-&gt;integrate-&gt;test-&gt;deliver-&gt;deploy</span><br></pre></td></tr></table></figure><p>如果在测试阶段发现问题，需要开发确认，再找集成。如果线上有问题，需要反馈给交付，再由交付找产品经理，再由产品经理<br>反馈给开发；之后流程再从开发开始走。不仅耗费了大量的时间，也消耗了好多 Money。</p><p>现在越来越多的开源项目在 Github 上被开放出来，如果某个项目没有单元测试的话，几乎没人用他/她的代码。为何？代码不是我写的，万一出了问题，解决 Bug 又是一堆坑。与其填别人的坑，不如自己搞。</p><p>如果你是一个勤奋的人，那么你可以不写任何测试。如果你是或者想成为聪明的懒人，那么写测试吧。<br>写测试可以在别人问你这次代码靠谱吗？我们可以比较有底气地回答：是的！</p><h2 id="为什么很多-Coder-不写测试？"><a href="#为什么很多-Coder-不写测试？" class="headerlink" title="为什么很多 Coder 不写测试？"></a>为什么很多 Coder 不写测试？</h2><p>是啊，为什么不写测试呢？ 任务重，时间紧？不想写？我对自己的代码很有信心，完美无 Bug？</p><p>任务重，时间紧：在评估项目开发周期时，把测试时间一并考虑。为了速度，牺牲效率得不偿失。</p><p>不想写：嗯。继续不靠谱下去？</p><p>完美无Bug：是人就会犯错。写测试会让用户更加相信，说这句话不是自负，而是自信。</p><h2 id="本系列是关于什么的"><a href="#本系列是关于什么的" class="headerlink" title="本系列是关于什么的"></a>本系列是关于什么的</h2><p>测试的内容有很多：单元测试、性能测试、集成测试等等。本系列是使用<code>Minitest</code> 执行测试的 CookBook。 每篇文章着力于某一方面， 一是为了自我总结，二是希望可以给其它人一些帮助。</p><p>初次写，难免有很多不足之处，望不吝指出。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;之前几乎不写测试，嗯，我属于那一类人。很多时候是自己先写一个功能，然后输入一些简单案例跑一跑，如果过了，那么就……过了，可以&lt;code&gt;放心&lt;/code&gt;继续下面的工作了。直到维护一个个前辈们的项目，而且功能不断添加，添加。问题接着出现了：按下葫芦浮起瓢，改了一个 Bug，引出了其它的 Bug。代码在修改过程中，越来越心里没底。更别说重构了。。。。&lt;/p&gt;
&lt;h2 id=&quot;为什么要写测试？&quot;&gt;&lt;a href=&quot;#为什么要写测试？&quot; class=&quot;headerlink&quot; title=&quot;为什么要写测试？&quot;&gt;&lt;/a&gt;为什么要写测试？&lt;/h2&gt;&lt;p&gt;现在的 Coder 应该都有这样的共识：写测试总比不写要好。为什么呢？因为它可以给我们带来以下好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;便于整理编码思路&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们写代码，实际上使用计算机的语言来解决我们现实中的问题，方便我们的生活和工作。事实上，很不幸，现实比书本上描述地复杂得多。不是每个人都可以很快在头脑里对现实问题迅速抽象出来而且恰到好处的。&lt;/p&gt;
&lt;p&gt;在写具体写代码之前，如果先按接口写测试，可以保证接口的稳定性（设计好接口，也可以方便其它人并行开发），还可以发现设计的一些缺陷（比如设计不合理、复杂度高）。&lt;/p&gt;
&lt;p&gt;思路清晰了，那么我们代码的结构也会清晰。不仅自己看着舒服，别人维护也容易。&lt;/p&gt;
    
    </summary>
    
      <category term="Ruby" scheme="https://polarlights.github.io/categories/Ruby/"/>
    
      <category term="Test" scheme="https://polarlights.github.io/categories/Ruby/Test/"/>
    
    
      <category term="Test" scheme="https://polarlights.github.io/tags/Test/"/>
    
      <category term="Minitest" scheme="https://polarlights.github.io/tags/Minitest/"/>
    
      <category term="测试" scheme="https://polarlights.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>The Difference Of XX-like Methods In Ruby</title>
    <link href="https://polarlights.github.io/2015/10/23/what-is-the-difference-in-to_s-to_str_inspect/"/>
    <id>https://polarlights.github.io/2015/10/23/what-is-the-difference-in-to_s-to_str_inspect/</id>
    <published>2015-10-23T13:23:20.000Z</published>
    <updated>2019-08-11T09:30:13.758Z</updated>
    
    <content type="html"><![CDATA[<p>今日打开ruby-china发现Hooopo分享的一篇文章，感觉非常好，故记录之。</p><h1 id="to-s和inspect的区别"><a href="#to-s和inspect的区别" class="headerlink" title="to_s和inspect的区别"></a>to_s和inspect的区别</h1><p>class David<br>  def to_s<br>    &quot;to_s&quot;<br>  end</p><p>  def inspect<br>    &quot;inspect&quot;<br>  end<br>end</p><p>david = David.new  #inspect<br>puts david #to_s<br>print david #to_s<br>p david #inspect</p><p><strong>结论:</strong> </p><p><strong>1. puts obj =&gt; puts obj.to_s</strong></p><p><strong>2. p obj =&gt; puts obj.inspect</strong></p><h1 id="to-s和to-str的区别"><a href="#to-s和to-str的区别" class="headerlink" title="to_s和to_str的区别"></a>to_s和to_str的区别</h1><p>to_s和to_str在大部分时候是相同的，几乎每个对象都有to_s方法，(why?因为所有对象都继承自Object类)，但是不是每个对象都有to_str方法，这个方法只有在对象有string-like的行为时才定义。</p><p>但是并不是所有和字符串相关的方法都会调用to_str：</p><pre><code>class David  def to_str     &quot;to_str&quot;  end   def to_s     &quot;to_s&quot;   endenddavid = David.new #to_s&quot;hello, #{david}&quot; #hello,to_s[&apos;hello&apos;, david].join(&quot; &quot;) #heloo to_str&quot;hello &quot; + david #hello to_strFile.join(&quot;hello&quot;, david) #hello/to_str</code></pre><p><strong>根据上面的结果得出：在字符串内插和inspect的时候会调用to_s，而在Array#join,File#join,String#+的时候优先调用to_str</strong></p><p>其它类XX-like的方法还有to_i vs to_int; to_a vs to_ary </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今日打开ruby-china发现Hooopo分享的一篇文章，感觉非常好，故记录之。&lt;/p&gt;
&lt;h1 id=&quot;to-s和inspect的区别&quot;&gt;&lt;a href=&quot;#to-s和inspect的区别&quot; class=&quot;headerlink&quot; title=&quot;to_s和inspect的
      
    
    </summary>
    
      <category term="技术" scheme="https://polarlights.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Ruby" scheme="https://polarlights.github.io/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Mac Shortcuts</title>
    <link href="https://polarlights.github.io/2015/08/31/mac-shortcut/"/>
    <id>https://polarlights.github.io/2015/08/31/mac-shortcut/</id>
    <published>2015-08-31T12:00:00.000Z</published>
    <updated>2019-08-11T09:30:13.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="当前-App-切换窗口"><a href="#当前-App-切换窗口" class="headerlink" title="当前 App 切换窗口"></a>当前 App 切换窗口</h1><pre><code>向后切换窗口： Ctrl + Tab；Cmd + Shift + ]向前切换窗口： Ctrl + Shift + Tab；Cmd + Shift + [</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;当前-App-切换窗口&quot;&gt;&lt;a href=&quot;#当前-App-切换窗口&quot; class=&quot;headerlink&quot; title=&quot;当前 App 切换窗口&quot;&gt;&lt;/a&gt;当前 App 切换窗口&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;向后切换窗口： Ctrl + Tab；Cmd + S
      
    
    </summary>
    
      <category term="Tech" scheme="https://polarlights.github.io/categories/Tech/"/>
    
      <category term="Mac" scheme="https://polarlights.github.io/categories/Tech/Mac/"/>
    
    
      <category term="Mac" scheme="https://polarlights.github.io/tags/Mac/"/>
    
      <category term="Shortcuts" scheme="https://polarlights.github.io/tags/Shortcuts/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令之du</title>
    <link href="https://polarlights.github.io/2015/08/30/linux-du/"/>
    <id>https://polarlights.github.io/2015/08/30/linux-du/</id>
    <published>2015-08-30T12:00:00.000Z</published>
    <updated>2019-08-11T09:30:13.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="du-的基本含义和参数"><a href="#du-的基本含义和参数" class="headerlink" title="du 的基本含义和参数"></a>du 的基本含义和参数</h1><p><code>du</code> 用来显示文件的磁盘使用情况。</p><pre><code>-a 根据目录层级显示所有的文件。-c 显示总的大小-d [depth] 特定深度的所有文件大小-h 以 Human 可读的格式输出，自动带 B/KB/MB/GB/TB/PB-I mask 根据执行的权限忽略(Ignore) 文件和目录。-gkm 分别按 GB、KB 和 MB 为单位显示文件大小。-s 只显示每个特定文件的总和`-d 0`等效。</code></pre><a id="more"></a><h1 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h1><ul><li><p>显示总的文件大小</p><blockquote><p>du -s</p></blockquote></li><li><p>显示2层的文件大小</p><blockquote><p>du -h -d 2</p></blockquote></li><li><p>显示/var/demo 文件的统计信息</p><blockquote><p>du -ah /var/demo</p></blockquote></li></ul><h1 id="du-和-df-的区别"><a href="#du-和-df-的区别" class="headerlink" title="du 和 df 的区别"></a>du 和 df 的区别</h1><p><code>du</code> 和<code>df</code> 只有一个字母之差。du是面向文件的命令，只计算被文件占用的空间。<br>不计算文件系统metadata 占用的空间。df则是基于文件系统总体来计算，通过文件系统中未分配空间来确定系统中已经分配空间的大小。<br>df命令可以获取硬盘占用了多少空间，还剩下多少空间，它也可以显示所有文件系统对节点和磁盘块的使用情况。</p><p>df 的参数列表：</p><pre><code>-a 全部文件系统列表-h 以 Human 友好的方式显示-H 和-h 相似，但是大小进制为1000，而不是1024（很多 ISP、磁盘供应商都这么来）-l 只显示 local 的文件系统-t 列出文件系统类型(文件、目录，块等), Linux上为 T。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;du-的基本含义和参数&quot;&gt;&lt;a href=&quot;#du-的基本含义和参数&quot; class=&quot;headerlink&quot; title=&quot;du 的基本含义和参数&quot;&gt;&lt;/a&gt;du 的基本含义和参数&lt;/h1&gt;&lt;p&gt;&lt;code&gt;du&lt;/code&gt; 用来显示文件的磁盘使用情况。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-a 根据目录层级显示所有的文件。
-c 显示总的大小
-d [depth] 特定深度的所有文件大小
-h 以 Human 可读的格式输出，自动带 B/KB/MB/GB/TB/PB
-I mask 根据执行的权限忽略(Ignore) 文件和目录。
-gkm 分别按 GB、KB 和 MB 为单位显示文件大小。
-s 只显示每个特定文件的总和`-d 0`等效。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Tech" scheme="https://polarlights.github.io/categories/Tech/"/>
    
      <category term="Linux" scheme="https://polarlights.github.io/categories/Tech/Linux/"/>
    
    
      <category term="Linux" scheme="https://polarlights.github.io/tags/Linux/"/>
    
      <category term="Bash" scheme="https://polarlights.github.io/tags/Bash/"/>
    
      <category term="du" scheme="https://polarlights.github.io/tags/du/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令之bg、fg、jobs 和 Ctrl-Z, Ctrl-C</title>
    <link href="https://polarlights.github.io/2015/08/30/linux-fg-bg-jobs/"/>
    <id>https://polarlights.github.io/2015/08/30/linux-fg-bg-jobs/</id>
    <published>2015-08-30T12:00:00.000Z</published>
    <updated>2019-08-11T09:30:13.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ctrl-C-Ctrl-D-Ctrl-Z-的区别"><a href="#Ctrl-C-Ctrl-D-Ctrl-Z-的区别" class="headerlink" title="Ctrl-C, Ctrl-D, Ctrl-Z 的区别"></a>Ctrl-C, Ctrl-D, Ctrl-Z 的区别</h1><p>在 Linux 的日常使用中，<code>Ctrl+C</code> 应该是用的最多的，他的用途是终止当前进程。那么<code>Ctrl+Z</code> 和<code>Ctrl+D</code> 又有什么用途么？</p><p><code>Ctrl+Z</code> 表示暂停一个进程，<code>Ctrl+D</code> 表示文件结束符(EOF)。</p><p>假如我们有一个会长期执行的程序，如果它原来就是在前台运行的话(<code>bundle exec sidekiq</code>)，<br>如果使用<code>Ctrl+Z</code>，会在终端输出<code>susppended bundle exec sidekiq</code>。当然 Ctrl+D 是不起作用的，因为它的<br>应用场景不是这样的。被暂停的进程可以使用<code>ps -ef | grep [进程名]</code>看到。Ctrl+D 更多地<br>在文件操作上，每个文件都有对应的标志(EOF)表示文件的结束。</p><h1 id="fg、bg-和-jobs"><a href="#fg、bg-和-jobs" class="headerlink" title="fg、bg 和 jobs"></a>fg、bg 和 jobs</h1><p><code>fg %[job num]</code>把一个任务从后台拿到前台来处理.foreground<br><code>bg %[job num]</code> 把一个任务从前台拿到后台去执行。background</p><p>那么 <code>job num</code> 怎么看呢？ 使用<code>jobs -l</code>, 最左侧的数字即是。比如有一个后台进程job id 为2，那么执行<code>fg %2</code>即可。</p><p>如何将暂停的进程在后台继续执行呢？执行<code>bg %[job num]</code> 就可以了。如果有多个的话，使用<code>bg</code>(没有 job num)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ctrl-C-Ctrl-D-Ctrl-Z-的区别&quot;&gt;&lt;a href=&quot;#Ctrl-C-Ctrl-D-Ctrl-Z-的区别&quot; class=&quot;headerlink&quot; title=&quot;Ctrl-C, Ctrl-D, Ctrl-Z 的区别&quot;&gt;&lt;/a&gt;Ctrl-C, Ctrl
      
    
    </summary>
    
      <category term="Tech" scheme="https://polarlights.github.io/categories/Tech/"/>
    
      <category term="Linux" scheme="https://polarlights.github.io/categories/Tech/Linux/"/>
    
    
      <category term="Linux" scheme="https://polarlights.github.io/tags/Linux/"/>
    
      <category term="bg" scheme="https://polarlights.github.io/tags/bg/"/>
    
      <category term="fg" scheme="https://polarlights.github.io/tags/fg/"/>
    
      <category term="jobs" scheme="https://polarlights.github.io/tags/jobs/"/>
    
  </entry>
  
</feed>
